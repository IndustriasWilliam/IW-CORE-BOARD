
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800498c  0800498c  0000598c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800499c  0800499c  0000599c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080049a0  080049a0  000059a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  080049a4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000070  24000010  080049b4  00006010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000080  080049b4  00006080  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b4ee  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001cea  00000000  00000000  0001152c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000910  00000000  00000000  00013218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000006c5  00000000  00000000  00013b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003656e  00000000  00000000  000141ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c4f7  00000000  00000000  0004a75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00159e24  00000000  00000000  00056c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001b0a76  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002398  00000000  00000000  001b0abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000079  00000000  00000000  001b2e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004974 	.word	0x08004974

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004974 	.word	0x08004974

080002d8 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	@ 0x28
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ee:	4b31      	ldr	r3, [pc, #196]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80002f4:	4a2f      	ldr	r2, [pc, #188]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80002fe:	4b2d      	ldr	r3, [pc, #180]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	613b      	str	r3, [r7, #16]
 800030a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800030c:	4b29      	ldr	r3, [pc, #164]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000312:	4a28      	ldr	r2, [pc, #160]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 8000314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800031c:	4b25      	ldr	r3, [pc, #148]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032a:	4b22      	ldr	r3, [pc, #136]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000330:	4a20      	ldr	r2, [pc, #128]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 8000332:	f043 0302 	orr.w	r3, r3, #2
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800033a:	4b1e      	ldr	r3, [pc, #120]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000340:	f003 0302 	and.w	r3, r3, #2
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000348:	4b1a      	ldr	r3, [pc, #104]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800034e:	4a19      	ldr	r2, [pc, #100]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000358:	4b16      	ldr	r3, [pc, #88]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 800035a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800035e:	f003 0308 	and.w	r3, r3, #8
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b13      	ldr	r3, [pc, #76]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800036c:	4a11      	ldr	r2, [pc, #68]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000376:	4b0f      	ldr	r3, [pc, #60]	@ (80003b4 <MX_GPIO_Init+0xdc>)
 8000378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_BOOT_GPIO_Port, LED2_BOOT_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2102      	movs	r1, #2
 8000388:	480b      	ldr	r0, [pc, #44]	@ (80003b8 <MX_GPIO_Init+0xe0>)
 800038a:	f001 faa5 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_BOOT_Pin */
  GPIO_InitStruct.Pin = LED2_BOOT_Pin;
 800038e:	2302      	movs	r3, #2
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000392:	2301      	movs	r3, #1
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039a:	2300      	movs	r3, #0
 800039c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_BOOT_GPIO_Port, &GPIO_InitStruct);
 800039e:	f107 0314 	add.w	r3, r7, #20
 80003a2:	4619      	mov	r1, r3
 80003a4:	4804      	ldr	r0, [pc, #16]	@ (80003b8 <MX_GPIO_Init+0xe0>)
 80003a6:	f000 ffdd 	bl	8001364 <HAL_GPIO_Init>

}
 80003aa:	bf00      	nop
 80003ac:	3728      	adds	r7, #40	@ 0x28
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	58024400 	.word	0x58024400
 80003b8:	58021000 	.word	0x58021000

080003bc <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003c2:	4b34      	ldr	r3, [pc, #208]	@ (8000494 <CPU_CACHE_Enable+0xd8>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d11b      	bne.n	8000406 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003ce:	f3bf 8f4f 	dsb	sy
}
 80003d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003d4:	f3bf 8f6f 	isb	sy
}
 80003d8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003da:	4b2e      	ldr	r3, [pc, #184]	@ (8000494 <CPU_CACHE_Enable+0xd8>)
 80003dc:	2200      	movs	r2, #0
 80003de:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003e2:	f3bf 8f4f 	dsb	sy
}
 80003e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e8:	f3bf 8f6f 	isb	sy
}
 80003ec:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003ee:	4b29      	ldr	r3, [pc, #164]	@ (8000494 <CPU_CACHE_Enable+0xd8>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a28      	ldr	r2, [pc, #160]	@ (8000494 <CPU_CACHE_Enable+0xd8>)
 80003f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003fa:	f3bf 8f4f 	dsb	sy
}
 80003fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000400:	f3bf 8f6f 	isb	sy
}
 8000404:	e000      	b.n	8000408 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000406:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000408:	4b22      	ldr	r3, [pc, #136]	@ (8000494 <CPU_CACHE_Enable+0xd8>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000410:	2b00      	cmp	r3, #0
 8000412:	d138      	bne.n	8000486 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000414:	4b1f      	ldr	r3, [pc, #124]	@ (8000494 <CPU_CACHE_Enable+0xd8>)
 8000416:	2200      	movs	r2, #0
 8000418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800041c:	f3bf 8f4f 	dsb	sy
}
 8000420:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000422:	4b1c      	ldr	r3, [pc, #112]	@ (8000494 <CPU_CACHE_Enable+0xd8>)
 8000424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000428:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	0b5b      	lsrs	r3, r3, #13
 800042e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000432:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	08db      	lsrs	r3, r3, #3
 8000438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800043c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	015a      	lsls	r2, r3, #5
 8000442:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000446:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800044c:	4911      	ldr	r1, [pc, #68]	@ (8000494 <CPU_CACHE_Enable+0xd8>)
 800044e:	4313      	orrs	r3, r2
 8000450:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	1e5a      	subs	r2, r3, #1
 8000458:	607a      	str	r2, [r7, #4]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d1ef      	bne.n	800043e <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	1e5a      	subs	r2, r3, #1
 8000462:	60ba      	str	r2, [r7, #8]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d1e5      	bne.n	8000434 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000468:	f3bf 8f4f 	dsb	sy
}
 800046c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <CPU_CACHE_Enable+0xd8>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a08      	ldr	r2, [pc, #32]	@ (8000494 <CPU_CACHE_Enable+0xd8>)
 8000474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800047a:	f3bf 8f4f 	dsb	sy
}
 800047e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000480:	f3bf 8f6f 	isb	sy
}
 8000484:	e000      	b.n	8000488 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000486:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 8000488:	bf00      	nop
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	e000ed00 	.word	0xe000ed00

08000498 <CPU_CACHE_Disable>:
  * @brief  CPU L1-Cache disable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Disable(void)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800049e:	f3bf 8f4f 	dsb	sy
}
 80004a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a4:	f3bf 8f6f 	isb	sy
}
 80004a8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80004aa:	4b28      	ldr	r3, [pc, #160]	@ (800054c <CPU_CACHE_Disable+0xb4>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a27      	ldr	r2, [pc, #156]	@ (800054c <CPU_CACHE_Disable+0xb4>)
 80004b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80004b4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004b6:	4b25      	ldr	r3, [pc, #148]	@ (800054c <CPU_CACHE_Disable+0xb4>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004be:	f3bf 8f4f 	dsb	sy
}
 80004c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004c4:	f3bf 8f6f 	isb	sy
}
 80004c8:	bf00      	nop
}
 80004ca:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004cc:	4b1f      	ldr	r3, [pc, #124]	@ (800054c <CPU_CACHE_Disable+0xb4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004d4:	f3bf 8f4f 	dsb	sy
}
 80004d8:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 80004da:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <CPU_CACHE_Disable+0xb4>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a1b      	ldr	r2, [pc, #108]	@ (800054c <CPU_CACHE_Disable+0xb4>)
 80004e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80004e4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004e6:	f3bf 8f4f 	dsb	sy
}
 80004ea:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004ec:	4b17      	ldr	r3, [pc, #92]	@ (800054c <CPU_CACHE_Disable+0xb4>)
 80004ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004f2:	60fb      	str	r3, [r7, #12]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	0b5b      	lsrs	r3, r3, #13
 80004f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004fc:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	08db      	lsrs	r3, r3, #3
 8000502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000506:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	015a      	lsls	r2, r3, #5
 800050c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000510:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000516:	490d      	ldr	r1, [pc, #52]	@ (800054c <CPU_CACHE_Disable+0xb4>)
 8000518:	4313      	orrs	r3, r2
 800051a:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	1e5a      	subs	r2, r3, #1
 8000522:	607a      	str	r2, [r7, #4]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d1ef      	bne.n	8000508 <CPU_CACHE_Disable+0x70>
    } while(sets-- != 0U);
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	1e5a      	subs	r2, r3, #1
 800052c:	60ba      	str	r2, [r7, #8]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d1e5      	bne.n	80004fe <CPU_CACHE_Disable+0x66>
  __ASM volatile ("dsb 0xF":::"memory");
 8000532:	f3bf 8f4f 	dsb	sy
}
 8000536:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000538:	f3bf 8f6f 	isb	sy
}
 800053c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800053e:	bf00      	nop
	/* Disable I-Cache */
	SCB_DisableICache();

	/* Disable D-Cache */
	SCB_DisableDCache();
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0

	CPU_CACHE_Enable();
 8000556:	f7ff ff31 	bl	80003bc <CPU_CACHE_Enable>
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800055a:	f000 fd81 	bl	8001060 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 800055e:	f000 f84b 	bl	80005f8 <SystemClock_Config>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000562:	f7ff feb9 	bl	80002d8 <MX_GPIO_Init>


	if(CSP_QUADSPI_Init() != HAL_OK){
 8000566:	f000 fadb 	bl	8000b20 <CSP_QUADSPI_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <main+0x24>
		Error_Handler();
 8000570:	f000 f8bc 	bl	80006ec <Error_Handler>
	}

	if(CSP_QSPI_EnableMemoryMappedMode() != HAL_OK){
 8000574:	f000 fbb8 	bl	8000ce8 <CSP_QSPI_EnableMemoryMappedMode>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <main+0x32>
		Error_Handler();
 800057e:	f000 f8b5 	bl	80006ec <Error_Handler>
	}


//	MPU_Config();
	CPU_CACHE_Disable();
 8000582:	f7ff ff89 	bl	8000498 <CPU_CACHE_Disable>


	/* Disable Systick interrupt */
	SysTick->CTRL = 0;
 8000586:	4b17      	ldr	r3, [pc, #92]	@ (80005e4 <main+0x94>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]

	for (int i=0; i<8; i++)
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	e00f      	b.n	80005b2 <main+0x62>
	{
		NVIC->ICER[i] = 0xFFFFFFFF;
 8000592:	4a15      	ldr	r2, [pc, #84]	@ (80005e8 <main+0x98>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3320      	adds	r3, #32
 8000598:	f04f 31ff 	mov.w	r1, #4294967295
 800059c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80005a0:	f3bf 8f4f 	dsb	sy
}
 80005a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005a6:	f3bf 8f6f 	isb	sy
}
 80005aa:	bf00      	nop
	for (int i=0; i<8; i++)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3301      	adds	r3, #1
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b07      	cmp	r3, #7
 80005b6:	ddec      	ble.n	8000592 <main+0x42>
		__DSB();
		__ISB();
	}
	SCB->VTOR = QSPI_BASE;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <main+0x9c>)
 80005ba:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
 80005be:	609a      	str	r2, [r3, #8]
	/* Initialize user application's Stack Pointer & Jump to user application */
	JumpToApplication = (pFunction) (*(__IO uint32_t*) (APPLICATION_ADDRESS + 4));
 80005c0:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <main+0xa0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b0b      	ldr	r3, [pc, #44]	@ (80005f4 <main+0xa4>)
 80005c8:	601a      	str	r2, [r3, #0]
	__set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80005ca:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	f383 8808 	msr	MSP, r3
}
 80005d8:	bf00      	nop



	JumpToApplication();
 80005da:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <main+0xa4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4798      	blx	r3

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0x90>
 80005e4:	e000e010 	.word	0xe000e010
 80005e8:	e000e100 	.word	0xe000e100
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	90000004 	.word	0x90000004
 80005f4:	2400002c 	.word	0x2400002c

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09c      	sub	sp, #112	@ 0x70
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000602:	224c      	movs	r2, #76	@ 0x4c
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 f988 	bl	800491c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2220      	movs	r2, #32
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f004 f982 	bl	800491c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000618:	2002      	movs	r0, #2
 800061a:	f001 f977 	bl	800190c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800061e:	2300      	movs	r3, #0
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4b30      	ldr	r3, [pc, #192]	@ (80006e4 <SystemClock_Config+0xec>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a2f      	ldr	r2, [pc, #188]	@ (80006e4 <SystemClock_Config+0xec>)
 8000628:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b2d      	ldr	r3, [pc, #180]	@ (80006e4 <SystemClock_Config+0xec>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4b2b      	ldr	r3, [pc, #172]	@ (80006e8 <SystemClock_Config+0xf0>)
 800063a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800063c:	4a2a      	ldr	r2, [pc, #168]	@ (80006e8 <SystemClock_Config+0xf0>)
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000644:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <SystemClock_Config+0xf0>)
 8000646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000650:	bf00      	nop
 8000652:	4b24      	ldr	r3, [pc, #144]	@ (80006e4 <SystemClock_Config+0xec>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800065e:	d1f8      	bne.n	8000652 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000668:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	2302      	movs	r3, #2
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000672:	2305      	movs	r3, #5
 8000674:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000676:	23f0      	movs	r3, #240	@ 0xf0
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000686:	2308      	movs	r3, #8
 8000688:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800068a:	2300      	movs	r3, #0
 800068c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fe48 	bl	800232c <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006a2:	f000 f823 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	233f      	movs	r3, #63	@ 0x3f
 80006a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2303      	movs	r3, #3
 80006ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006b2:	2308      	movs	r3, #8
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006b6:	2340      	movs	r3, #64	@ 0x40
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ba:	2340      	movs	r3, #64	@ 0x40
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006c4:	2340      	movs	r3, #64	@ 0x40
 80006c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2104      	movs	r1, #4
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fa87 	bl	8002be0 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006d8:	f000 f808 	bl	80006ec <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3770      	adds	r7, #112	@ 0x70
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58024800 	.word	0x58024800
 80006e8:	58000400 	.word	0x58000400

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <Error_Handler+0x8>

080006f8 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <MX_QUADSPI_Init+0x7c>)
 8000700:	4a1d      	ldr	r2, [pc, #116]	@ (8000778 <MX_QUADSPI_Init+0x80>)
 8000702:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <MX_QUADSPI_Init+0x7c>)
 8000706:	2201      	movs	r2, #1
 8000708:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <MX_QUADSPI_Init+0x7c>)
 800070c:	2201      	movs	r2, #1
 800070e:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <MX_QUADSPI_Init+0x7c>)
 8000712:	2210      	movs	r2, #16
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800071a:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	fa93 f3a3 	rbit	r3, r3
 8000722:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d101      	bne.n	8000732 <MX_QUADSPI_Init+0x3a>
  {
    return 32U;
 800072e:	2320      	movs	r3, #32
 8000730:	e003      	b.n	800073a <MX_QUADSPI_Init+0x42>
  }
  return __builtin_clz(value);
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	fab3 f383 	clz	r3, r3
 8000738:	b2db      	uxtb	r3, r3
  hqspi.Init.FlashSize = POSITION_VAL(MEMORY_FLASH_SIZE) - 1;
 800073a:	3b01      	subs	r3, #1
 800073c:	461a      	mov	r2, r3
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <MX_QUADSPI_Init+0x7c>)
 8000740:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_QUADSPI_Init+0x7c>)
 8000744:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000748:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800074a:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_QUADSPI_Init+0x7c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000750:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_QUADSPI_Init+0x7c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000756:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <MX_QUADSPI_Init+0x7c>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800075c:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_QUADSPI_Init+0x7c>)
 800075e:	f001 f90f 	bl	8001980 <HAL_QSPI_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_QUADSPI_Init+0x74>
  {
    Error_Handler();
 8000768:	f7ff ffc0 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	24000030 	.word	0x24000030
 8000778:	52005000 	.word	0x52005000

0800077c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b0bc      	sub	sp, #240	@ 0xf0
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000794:	f107 0318 	add.w	r3, r7, #24
 8000798:	22c0      	movs	r2, #192	@ 0xc0
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f004 f8bd 	bl	800491c <memset>
  if(qspiHandle->Instance==QUADSPI)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a55      	ldr	r2, [pc, #340]	@ (80008fc <HAL_QSPI_MspInit+0x180>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	f040 80a3 	bne.w	80008f4 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80007ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80007b2:	f04f 0300 	mov.w	r3, #0
 80007b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007be:	f107 0318 	add.w	r3, r7, #24
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 fd3c 	bl	8003240 <HAL_RCCEx_PeriphCLKConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80007ce:	f7ff ff8d 	bl	80006ec <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80007d2:	4b4b      	ldr	r3, [pc, #300]	@ (8000900 <HAL_QSPI_MspInit+0x184>)
 80007d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007d8:	4a49      	ldr	r2, [pc, #292]	@ (8000900 <HAL_QSPI_MspInit+0x184>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007de:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80007e2:	4b47      	ldr	r3, [pc, #284]	@ (8000900 <HAL_QSPI_MspInit+0x184>)
 80007e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f0:	4b43      	ldr	r3, [pc, #268]	@ (8000900 <HAL_QSPI_MspInit+0x184>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f6:	4a42      	ldr	r2, [pc, #264]	@ (8000900 <HAL_QSPI_MspInit+0x184>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000800:	4b3f      	ldr	r3, [pc, #252]	@ (8000900 <HAL_QSPI_MspInit+0x184>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b3c      	ldr	r3, [pc, #240]	@ (8000900 <HAL_QSPI_MspInit+0x184>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000814:	4a3a      	ldr	r2, [pc, #232]	@ (8000900 <HAL_QSPI_MspInit+0x184>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081e:	4b38      	ldr	r3, [pc, #224]	@ (8000900 <HAL_QSPI_MspInit+0x184>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000824:	f003 0302 	and.w	r3, r3, #2
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800082c:	4b34      	ldr	r3, [pc, #208]	@ (8000900 <HAL_QSPI_MspInit+0x184>)
 800082e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000832:	4a33      	ldr	r2, [pc, #204]	@ (8000900 <HAL_QSPI_MspInit+0x184>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800083c:	4b30      	ldr	r3, [pc, #192]	@ (8000900 <HAL_QSPI_MspInit+0x184>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800084a:	2304      	movs	r3, #4
 800084c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085c:	2302      	movs	r3, #2
 800085e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000862:	2309      	movs	r3, #9
 8000864:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000868:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800086c:	4619      	mov	r1, r3
 800086e:	4825      	ldr	r0, [pc, #148]	@ (8000904 <HAL_QSPI_MspInit+0x188>)
 8000870:	f000 fd78 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000874:	2304      	movs	r3, #4
 8000876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800088c:	2309      	movs	r3, #9
 800088e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000896:	4619      	mov	r1, r3
 8000898:	481b      	ldr	r0, [pc, #108]	@ (8000908 <HAL_QSPI_MspInit+0x18c>)
 800089a:	f000 fd63 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800089e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80008a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80008b8:	2309      	movs	r3, #9
 80008ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008be:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80008c2:	4619      	mov	r1, r3
 80008c4:	4811      	ldr	r0, [pc, #68]	@ (800090c <HAL_QSPI_MspInit+0x190>)
 80008c6:	f000 fd4d 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008ca:	2340      	movs	r3, #64	@ 0x40
 80008cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008e2:	230a      	movs	r3, #10
 80008e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	@ (8000908 <HAL_QSPI_MspInit+0x18c>)
 80008f0:	f000 fd38 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80008f4:	bf00      	nop
 80008f6:	37f0      	adds	r7, #240	@ 0xf0
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	52005000 	.word	0x52005000
 8000900:	58024400 	.word	0x58024400
 8000904:	58021000 	.word	0x58021000
 8000908:	58020400 	.word	0x58020400
 800090c:	58020c00 	.word	0x58020c00

08000910 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0d      	ldr	r2, [pc, #52]	@ (8000954 <HAL_QSPI_MspDeInit+0x44>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d114      	bne.n	800094c <HAL_QSPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <HAL_QSPI_MspDeInit+0x48>)
 8000924:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000928:	4a0b      	ldr	r2, [pc, #44]	@ (8000958 <HAL_QSPI_MspDeInit+0x48>)
 800092a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800092e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8000932:	2104      	movs	r1, #4
 8000934:	4809      	ldr	r0, [pc, #36]	@ (800095c <HAL_QSPI_MspDeInit+0x4c>)
 8000936:	f000 fec5 	bl	80016c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 800093a:	2144      	movs	r1, #68	@ 0x44
 800093c:	4808      	ldr	r0, [pc, #32]	@ (8000960 <HAL_QSPI_MspDeInit+0x50>)
 800093e:	f000 fec1 	bl	80016c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13);
 8000942:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8000946:	4807      	ldr	r0, [pc, #28]	@ (8000964 <HAL_QSPI_MspDeInit+0x54>)
 8000948:	f000 febc 	bl	80016c4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	52005000 	.word	0x52005000
 8000958:	58024400 	.word	0x58024400
 800095c:	58021000 	.word	0x58021000
 8000960:	58020400 	.word	0x58020400
 8000964:	58020c00 	.word	0x58020c00

08000968 <QSPI_Enter4BytesAddressMode>:

/* USER CODE BEGIN 1 */

static uint8_t QSPI_Enter4BytesAddressMode(void){
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	@ 0x38
 800096c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;


	sCommand.Instruction = ENTER_4_BYTES_ADDRESS_MODE;
 800096e:	23b7      	movs	r3, #183	@ 0xb7
 8000970:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000972:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000976:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
	sCommand.DataMode          = QSPI_DATA_NONE;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles       = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
	sCommand.NbData            = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000990:	2300      	movs	r3, #0
 8000992:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000994:	2300      	movs	r3, #0
 8000996:	637b      	str	r3, [r7, #52]	@ 0x34

	/* Configure the command */
	if(HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800099e:	4619      	mov	r1, r3
 80009a0:	4806      	ldr	r0, [pc, #24]	@ (80009bc <QSPI_Enter4BytesAddressMode+0x54>)
 80009a2:	f001 f881 	bl	8001aa8 <HAL_QSPI_Command>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <QSPI_Enter4BytesAddressMode+0x48>
	{
		return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e000      	b.n	80009b2 <QSPI_Enter4BytesAddressMode+0x4a>
	}


	return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3738      	adds	r7, #56	@ 0x38
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	24000030 	.word	0x24000030

080009c0 <QSPI_ReadStatus>:

static uint8_t QSPI_ReadStatus(uint8_t* value, StatusRegisters reg){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b092      	sub	sp, #72	@ 0x48
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
	QSPI_CommandTypeDef sCommand;
	uint8_t regValue = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]

	if(reg == STATUS_1){
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d102      	bne.n	80009dc <QSPI_ReadStatus+0x1c>
		sCommand.Instruction = READ_STATUS_REGISTER_1;
 80009d6:	2305      	movs	r3, #5
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	e00a      	b.n	80009f2 <QSPI_ReadStatus+0x32>
	}else if(reg == STATUS_1){
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <QSPI_ReadStatus+0x28>
		sCommand.Instruction = READ_STATUS_REGISTER_2;
 80009e2:	2335      	movs	r3, #53	@ 0x35
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	e004      	b.n	80009f2 <QSPI_ReadStatus+0x32>
	}
	else if(reg == STATUS_3){
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d101      	bne.n	80009f2 <QSPI_ReadStatus+0x32>
		sCommand.Instruction = READ_STATUS_REGISTER_3;
 80009ee:	2315      	movs	r3, #21
 80009f0:	613b      	str	r3, [r7, #16]
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80009f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DataMode          = QSPI_DATA_1_LINE;
 8000a00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a04:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DummyCycles       = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.NbData            = 1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a12:	2300      	movs	r3, #0
 8000a14:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000a16:	2300      	movs	r3, #0
 8000a18:	647b      	str	r3, [r7, #68]	@ 0x44

	/* Configure the command */
	if(HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a22:	4619      	mov	r1, r3
 8000a24:	480e      	ldr	r0, [pc, #56]	@ (8000a60 <QSPI_ReadStatus+0xa0>)
 8000a26:	f001 f83f 	bl	8001aa8 <HAL_QSPI_Command>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <QSPI_ReadStatus+0x74>
	{
		return HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e010      	b.n	8000a56 <QSPI_ReadStatus+0x96>
	}

	/* Reception of the data */
	if(HAL_QSPI_Receive(&hqspi, &regValue, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a34:	f107 030f 	add.w	r3, r7, #15
 8000a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <QSPI_ReadStatus+0xa0>)
 8000a40:	f001 f922 	bl	8001c88 <HAL_QSPI_Receive>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <QSPI_ReadStatus+0x8e>
	{
		return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e003      	b.n	8000a56 <QSPI_ReadStatus+0x96>
	}

	*value = regValue;
 8000a4e:	7bfa      	ldrb	r2, [r7, #15]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3748      	adds	r7, #72	@ 0x48
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	24000030 	.word	0x24000030

08000a64 <QSPI_WriteStatus>:
static uint8_t QSPI_WriteStatus(StatusRegisters reg, uint8_t value){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b090      	sub	sp, #64	@ 0x40
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	460a      	mov	r2, r1
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	4613      	mov	r3, r2
 8000a72:	71bb      	strb	r3, [r7, #6]
	QSPI_CommandTypeDef sCommand;

	if(reg == STATUS_1){
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <QSPI_WriteStatus+0x1c>
		sCommand.Instruction = WRITE_STATUS_REGISTER_1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	e00a      	b.n	8000a96 <QSPI_WriteStatus+0x32>
	}else if(reg == STATUS_1){
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d102      	bne.n	8000a8c <QSPI_WriteStatus+0x28>
		sCommand.Instruction = WRITE_STATUS_REGISTER_2;
 8000a86:	2331      	movs	r3, #49	@ 0x31
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	e004      	b.n	8000a96 <QSPI_WriteStatus+0x32>
	}
	else if(reg == STATUS_3){
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d101      	bne.n	8000a96 <QSPI_WriteStatus+0x32>
		sCommand.Instruction = WRITE_STATUS_REGISTER_3;
 8000a92:	2311      	movs	r3, #17
 8000a94:	60bb      	str	r3, [r7, #8]
	}

	/* Initialize the program command */
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000a96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a9a:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DataMode          = QSPI_DATA_1_LINE;
 8000aa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DummyCycles       = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
	sCommand.NbData            = 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000aba:	2300      	movs	r3, #0
 8000abc:	63fb      	str	r3, [r7, #60]	@ 0x3c

	/* Enable write operations */
	if(QSPI_WriteEnable() != HAL_OK)
 8000abe:	f000 f88f 	bl	8000be0 <QSPI_WriteEnable>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <QSPI_WriteStatus+0x68>
	{
		return HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e022      	b.n	8000b12 <QSPI_WriteStatus+0xae>
	}

	/* Configure the command */
	if(HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4811      	ldr	r0, [pc, #68]	@ (8000b1c <QSPI_WriteStatus+0xb8>)
 8000ad8:	f000 ffe6 	bl	8001aa8 <HAL_QSPI_Command>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <QSPI_WriteStatus+0x82>
	{
		return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e015      	b.n	8000b12 <QSPI_WriteStatus+0xae>
	}

	/* Transmission of the data */
	if(HAL_QSPI_Transmit(&hqspi, &value, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ae6:	1dbb      	adds	r3, r7, #6
 8000ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000aec:	4619      	mov	r1, r3
 8000aee:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <QSPI_WriteStatus+0xb8>)
 8000af0:	f001 f838 	bl	8001b64 <HAL_QSPI_Transmit>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <QSPI_WriteStatus+0x9a>
	{
		return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e009      	b.n	8000b12 <QSPI_WriteStatus+0xae>
	}

	/* Configure automatic polling mode to wait for end of program */
	if(QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000afe:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000b02:	f000 f833 	bl	8000b6c <QSPI_AutoPollingMemReady>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <QSPI_WriteStatus+0xac>
	{
		return HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e000      	b.n	8000b12 <QSPI_WriteStatus+0xae>
	}

	return HAL_OK;
 8000b10:	2300      	movs	r3, #0

}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3740      	adds	r7, #64	@ 0x40
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	24000030 	.word	0x24000030

08000b20 <CSP_QUADSPI_Init>:

uint8_t CSP_QUADSPI_Init(void){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <CSP_QUADSPI_Init+0x44>)
 8000b26:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <CSP_QUADSPI_Init+0x48>)
 8000b28:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK)
 8000b2a:	480e      	ldr	r0, [pc, #56]	@ (8000b64 <CSP_QUADSPI_Init+0x44>)
 8000b2c:	f000 ff9c 	bl	8001a68 <HAL_QSPI_DeInit>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <CSP_QUADSPI_Init+0x1a>
    {
        return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e012      	b.n	8000b60 <CSP_QUADSPI_Init+0x40>
    }

    MX_QUADSPI_Init();
 8000b3a:	f7ff fddd 	bl	80006f8 <MX_QUADSPI_Init>

    QSPI_Enter4BytesAddressMode();
 8000b3e:	f7ff ff13 	bl	8000968 <QSPI_Enter4BytesAddressMode>

    if (QSPI_ResetChip() != HAL_OK)
 8000b42:	f000 f90d 	bl	8000d60 <QSPI_ResetChip>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <CSP_QUADSPI_Init+0x30>
    {
        return HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e007      	b.n	8000b60 <CSP_QUADSPI_Init+0x40>
    }

    if (QSPI_Configuration() != HAL_OK)
 8000b50:	f000 f890 	bl	8000c74 <QSPI_Configuration>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <CSP_QUADSPI_Init+0x3e>
    {
        return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <CSP_QUADSPI_Init+0x40>
    }
//    if(QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
//	{
//    	return HAL_ERROR;
//	}
    return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	24000030 	.word	0x24000030
 8000b68:	52005000 	.word	0x52005000

08000b6c <QSPI_AutoPollingMemReady>:
    }

    return HAL_OK;
}

uint8_t QSPI_AutoPollingMemReady(uint32_t time){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b096      	sub	sp, #88	@ 0x58
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b78:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	623b      	str	r3, [r7, #32]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000b86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b8a:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.DummyCycles = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b94:	2300      	movs	r3, #0
 8000b96:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	657b      	str	r3, [r7, #84]	@ 0x54

    sConfig.Match = 0x00;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
    sConfig.Mask = 0x01;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
    sConfig.StatusBytesSize = 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
    sConfig.Interval = 0x10;
 8000bac:	2310      	movs	r3, #16
 8000bae:	613b      	str	r3, [r7, #16]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000bb0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bb4:	61fb      	str	r3, [r7, #28]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, time) != HAL_OK)
 8000bb6:	f107 0208 	add.w	r2, r7, #8
 8000bba:	f107 0120 	add.w	r1, r7, #32
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4806      	ldr	r0, [pc, #24]	@ (8000bdc <QSPI_AutoPollingMemReady+0x70>)
 8000bc2:	f001 f8fe 	bl	8001dc2 <HAL_QSPI_AutoPolling>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <QSPI_AutoPollingMemReady+0x64>
    {
        return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e000      	b.n	8000bd2 <QSPI_AutoPollingMemReady+0x66>
    }

    return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3758      	adds	r7, #88	@ 0x58
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000030 	.word	0x24000030

08000be0 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b094      	sub	sp, #80	@ 0x50
 8000be4:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000be6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bea:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 8000bec:	2306      	movs	r3, #6
 8000bee:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.DummyCycles = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c04:	2300      	movs	r3, #0
 8000c06:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if(HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c0c:	f107 0318 	add.w	r3, r7, #24
 8000c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c14:	4619      	mov	r1, r3
 8000c16:	4816      	ldr	r0, [pc, #88]	@ (8000c70 <QSPI_WriteEnable+0x90>)
 8000c18:	f000 ff46 	bl	8001aa8 <HAL_QSPI_Command>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <QSPI_WriteEnable+0x46>
    {
        return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e01f      	b.n	8000c66 <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
 8000c26:	2302      	movs	r3, #2
 8000c28:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8000c36:	2310      	movs	r3, #16
 8000c38:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000c3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c3e:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 8000c40:	2305      	movs	r3, #5
 8000c42:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000c44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if(HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c4a:	463a      	mov	r2, r7
 8000c4c:	f107 0118 	add.w	r1, r7, #24
 8000c50:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c54:	4806      	ldr	r0, [pc, #24]	@ (8000c70 <QSPI_WriteEnable+0x90>)
 8000c56:	f001 f8b4 	bl	8001dc2 <HAL_QSPI_AutoPolling>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <QSPI_WriteEnable+0x84>
    {
        return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3750      	adds	r7, #80	@ 0x50
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	24000030 	.word	0x24000030

08000c74 <QSPI_Configuration>:

uint8_t QSPI_Configuration(void){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b090      	sub	sp, #64	@ 0x40
 8000c78:	af00      	add	r7, sp, #0
	uint8_t reg2, reg3 = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	QSPI_CommandTypeDef sCommand;

	if(QSPI_ReadStatus(&reg2, STATUS_2) != HAL_OK)
 8000c80:	f107 033f 	add.w	r3, r7, #63	@ 0x3f
 8000c84:	2101      	movs	r1, #1
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fe9a 	bl	80009c0 <QSPI_ReadStatus>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <QSPI_Configuration+0x22>
	{
		return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e023      	b.n	8000cde <QSPI_Configuration+0x6a>
	}
	if(QSPI_ReadStatus(&reg3, STATUS_3) != HAL_OK)
 8000c96:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fe8f 	bl	80009c0 <QSPI_ReadStatus>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <QSPI_Configuration+0x38>
	{
		return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e018      	b.n	8000cde <QSPI_Configuration+0x6a>
	}

	if((reg2 & 0x02) == 0){
 8000cac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d111      	bne.n	8000cdc <QSPI_Configuration+0x68>
		reg2 |=  BIT_SR_Quad_Enable;
 8000cb8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if(QSPI_WriteStatus(STATUS_2, reg2) != HAL_OK)
 8000cc6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000cca:	4619      	mov	r1, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f7ff fec9 	bl	8000a64 <QSPI_WriteStatus>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <QSPI_Configuration+0x68>
		{
			return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e000      	b.n	8000cde <QSPI_Configuration+0x6a>
//	}

//	QSPI_ExitQPIMode();


	return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3740      	adds	r7, #64	@ 0x40
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <CSP_QSPI_EnableMemoryMappedMode>:

	return HAL_OK;
}


uint8_t CSP_QSPI_EnableMemoryMappedMode(void){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b090      	sub	sp, #64	@ 0x40
 8000cec:	af00      	add	r7, sp, #0

    /* Enable Memory-Mapped mode-------------------------------------------------- */

#if 1
    /* Configure the command for the read instruction */
    sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000cee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf2:	623b      	str	r3, [r7, #32]
    sCommand.Instruction       = 0xEC;
 8000cf4:	23ec      	movs	r3, #236	@ 0xec
 8000cf6:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000cf8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressSize       = QSPI_ADDRESS_32_BITS;
 8000cfe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d02:	617b      	str	r3, [r7, #20]
    sCommand.Address = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]

    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8000d08:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
    sCommand.AlternateBytes    = 0xFF;
 8000d12:	23ff      	movs	r3, #255	@ 0xff
 8000d14:	613b      	str	r3, [r7, #16]

    sCommand.DataMode          = QSPI_DATA_4_LINES;
 8000d16:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.NbData 			= 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.DummyCycles       = 4;
 8000d20:	2304      	movs	r3, #4
 8000d22:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
	sCommand.SIOOMode          = QSPI_SIOO_INST_ONLY_FIRST_CMD;
#endif
    /* Configure the memory mapped mode */
    sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	607b      	str	r3, [r7, #4]
    sMemMappedCfg.TimeOutPeriod = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	603b      	str	r3, [r7, #0]
    if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK)
 8000d38:	463a      	mov	r2, r7
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <CSP_QSPI_EnableMemoryMappedMode+0x74>)
 8000d42:	f001 f8b5 	bl	8001eb0 <HAL_QSPI_MemoryMapped>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <CSP_QSPI_EnableMemoryMappedMode+0x68>
    {
        return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <CSP_QSPI_EnableMemoryMappedMode+0x6a>
    }
    return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3740      	adds	r7, #64	@ 0x40
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	24000030 	.word	0x24000030

08000d60 <QSPI_ResetChip>:

uint8_t QSPI_ResetChip(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b090      	sub	sp, #64	@ 0x40
 8000d64:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d6e:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_32_BITS;
 8000d70:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d74:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d82:	2300      	movs	r3, #0
 8000d84:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 8000d86:	2366      	movs	r3, #102	@ 0x66
 8000d88:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.DummyCycles = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK){
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000da0:	4619      	mov	r1, r3
 8000da2:	4817      	ldr	r0, [pc, #92]	@ (8000e00 <QSPI_ResetChip+0xa0>)
 8000da4:	f000 fe80 	bl	8001aa8 <HAL_QSPI_Command>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <QSPI_ResetChip+0x52>
        return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e021      	b.n	8000df6 <QSPI_ResetChip+0x96>
    }
    for (temp = 0; temp < 200; temp++){
 8000db2:	2300      	movs	r3, #0
 8000db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000db6:	e003      	b.n	8000dc0 <QSPI_ResetChip+0x60>
        __NOP();
 8000db8:	bf00      	nop
    for (temp = 0; temp < 200; temp++){
 8000dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dc2:	2bc7      	cmp	r3, #199	@ 0xc7
 8000dc4:	d9f8      	bls.n	8000db8 <QSPI_ResetChip+0x58>
    }

    sCommand.Instruction = RESET_EXECUTE_CMD;
 8000dc6:	2399      	movs	r3, #153	@ 0x99
 8000dc8:	607b      	str	r3, [r7, #4]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480b      	ldr	r0, [pc, #44]	@ (8000e00 <QSPI_ResetChip+0xa0>)
 8000dd4:	f000 fe68 	bl	8001aa8 <HAL_QSPI_Command>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <QSPI_ResetChip+0x82>
    {
        return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e009      	b.n	8000df6 <QSPI_ResetChip+0x96>
    }

    if(QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000de2:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000de6:	f7ff fec1 	bl	8000b6c <QSPI_AutoPollingMemReady>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <QSPI_ResetChip+0x94>
	{
    	return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e000      	b.n	8000df6 <QSPI_ResetChip+0x96>
	}

    return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3740      	adds	r7, #64	@ 0x40
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	24000030 	.word	0x24000030

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <HAL_MspInit+0x30>)
 8000e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e10:	4a08      	ldr	r2, [pc, #32]	@ (8000e34 <HAL_MspInit+0x30>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_MspInit+0x30>)
 8000e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	58024400 	.word	0x58024400

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <NMI_Handler+0x4>

08000e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <MemManage_Handler+0x4>

08000e50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8e:	f000 f959 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b43      	ldr	r3, [pc, #268]	@ (8000fac <SystemInit+0x114>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ea2:	4a42      	ldr	r2, [pc, #264]	@ (8000fac <SystemInit+0x114>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eac:	4b40      	ldr	r3, [pc, #256]	@ (8000fb0 <SystemInit+0x118>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 030f 	and.w	r3, r3, #15
 8000eb4:	2b06      	cmp	r3, #6
 8000eb6:	d807      	bhi.n	8000ec8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb0 <SystemInit+0x118>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f023 030f 	bic.w	r3, r3, #15
 8000ec0:	4a3b      	ldr	r2, [pc, #236]	@ (8000fb0 <SystemInit+0x118>)
 8000ec2:	f043 0307 	orr.w	r3, r3, #7
 8000ec6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ec8:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb4 <SystemInit+0x11c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a39      	ldr	r2, [pc, #228]	@ (8000fb4 <SystemInit+0x11c>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ed4:	4b37      	ldr	r3, [pc, #220]	@ (8000fb4 <SystemInit+0x11c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000eda:	4b36      	ldr	r3, [pc, #216]	@ (8000fb4 <SystemInit+0x11c>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4935      	ldr	r1, [pc, #212]	@ (8000fb4 <SystemInit+0x11c>)
 8000ee0:	4b35      	ldr	r3, [pc, #212]	@ (8000fb8 <SystemInit+0x120>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ee6:	4b32      	ldr	r3, [pc, #200]	@ (8000fb0 <SystemInit+0x118>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d007      	beq.n	8000f02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb0 <SystemInit+0x118>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f023 030f 	bic.w	r3, r3, #15
 8000efa:	4a2d      	ldr	r2, [pc, #180]	@ (8000fb0 <SystemInit+0x118>)
 8000efc:	f043 0307 	orr.w	r3, r3, #7
 8000f00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f02:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb4 <SystemInit+0x11c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f08:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <SystemInit+0x11c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f0e:	4b29      	ldr	r3, [pc, #164]	@ (8000fb4 <SystemInit+0x11c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f14:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <SystemInit+0x11c>)
 8000f16:	4a29      	ldr	r2, [pc, #164]	@ (8000fbc <SystemInit+0x124>)
 8000f18:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <SystemInit+0x11c>)
 8000f1c:	4a28      	ldr	r2, [pc, #160]	@ (8000fc0 <SystemInit+0x128>)
 8000f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <SystemInit+0x11c>)
 8000f22:	4a28      	ldr	r2, [pc, #160]	@ (8000fc4 <SystemInit+0x12c>)
 8000f24:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <SystemInit+0x11c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <SystemInit+0x11c>)
 8000f2e:	4a25      	ldr	r2, [pc, #148]	@ (8000fc4 <SystemInit+0x12c>)
 8000f30:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f32:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <SystemInit+0x11c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f38:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <SystemInit+0x11c>)
 8000f3a:	4a22      	ldr	r2, [pc, #136]	@ (8000fc4 <SystemInit+0x12c>)
 8000f3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <SystemInit+0x11c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <SystemInit+0x11c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a1a      	ldr	r2, [pc, #104]	@ (8000fb4 <SystemInit+0x11c>)
 8000f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f50:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <SystemInit+0x11c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f56:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <SystemInit+0x130>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <SystemInit+0x134>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f62:	d202      	bcs.n	8000f6a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <SystemInit+0x138>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <SystemInit+0x11c>)
 8000f6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d113      	bne.n	8000fa0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <SystemInit+0x11c>)
 8000f7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f7e:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <SystemInit+0x11c>)
 8000f80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f84:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <SystemInit+0x13c>)
 8000f8a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f8e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <SystemInit+0x11c>)
 8000f92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f96:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <SystemInit+0x11c>)
 8000f98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f9c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00
 8000fb0:	52002000 	.word	0x52002000
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fbc:	02020200 	.word	0x02020200
 8000fc0:	01ff0000 	.word	0x01ff0000
 8000fc4:	01010280 	.word	0x01010280
 8000fc8:	5c001000 	.word	0x5c001000
 8000fcc:	ffff0000 	.word	0xffff0000
 8000fd0:	51008108 	.word	0x51008108
 8000fd4:	52004000 	.word	0x52004000

08000fd8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <ExitRun0Mode+0x2c>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	4a08      	ldr	r2, [pc, #32]	@ (8001004 <ExitRun0Mode+0x2c>)
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000fe8:	bf00      	nop
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <ExitRun0Mode+0x2c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f9      	beq.n	8000fea <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	58024800 	.word	0x58024800

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001044 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800100c:	f7ff ffe4 	bl	8000fd8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001010:	f7ff ff42 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001014:	480c      	ldr	r0, [pc, #48]	@ (8001048 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001016:	490d      	ldr	r1, [pc, #52]	@ (800104c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001018:	4a0d      	ldr	r2, [pc, #52]	@ (8001050 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800102c:	4c0a      	ldr	r4, [pc, #40]	@ (8001058 <LoopFillZerobss+0x22>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103a:	f003 fc77 	bl	800492c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103e:	f7ff fa87 	bl	8000550 <main>
  bx  lr
 8001042:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001044:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001048:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800104c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001050:	080049a4 	.word	0x080049a4
  ldr r2, =_sbss
 8001054:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001058:	24000080 	.word	0x24000080

0800105c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC3_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001066:	2003      	movs	r0, #3
 8001068:	f000 f94a 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800106c:	f001 ff6e 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8001070:	4602      	mov	r2, r0
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <HAL_Init+0x68>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	f003 030f 	and.w	r3, r3, #15
 800107c:	4913      	ldr	r1, [pc, #76]	@ (80010cc <HAL_Init+0x6c>)
 800107e:	5ccb      	ldrb	r3, [r1, r3]
 8001080:	f003 031f 	and.w	r3, r3, #31
 8001084:	fa22 f303 	lsr.w	r3, r2, r3
 8001088:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800108a:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <HAL_Init+0x68>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	4a0e      	ldr	r2, [pc, #56]	@ (80010cc <HAL_Init+0x6c>)
 8001094:	5cd3      	ldrb	r3, [r2, r3]
 8001096:	f003 031f 	and.w	r3, r3, #31
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	fa22 f303 	lsr.w	r3, r2, r3
 80010a0:	4a0b      	ldr	r2, [pc, #44]	@ (80010d0 <HAL_Init+0x70>)
 80010a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010a4:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <HAL_Init+0x74>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010aa:	200f      	movs	r0, #15
 80010ac:	f000 f814 	bl	80010d8 <HAL_InitTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e002      	b.n	80010c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010ba:	f7ff fea3 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58024400 	.word	0x58024400
 80010cc:	0800498c 	.word	0x0800498c
 80010d0:	24000004 	.word	0x24000004
 80010d4:	24000000 	.word	0x24000000

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010e0:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <HAL_InitTick+0x60>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e021      	b.n	8001130 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <HAL_InitTick+0x64>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <HAL_InitTick+0x60>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f921 	bl	800134a <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f8f9 	bl	8001316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	@ (8001140 <HAL_InitTick+0x68>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2400000c 	.word	0x2400000c
 800113c:	24000000 	.word	0x24000000
 8001140:	24000008 	.word	0x24000008

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	2400000c 	.word	0x2400000c
 8001168:	2400007c 	.word	0x2400007c

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2400007c 	.word	0x2400007c

08001184 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <HAL_GetREVID+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	0c1b      	lsrs	r3, r3, #16
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	5c001000 	.word	0x5c001000

0800119c <__NVIC_SetPriorityGrouping>:
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <__NVIC_SetPriorityGrouping+0x40>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	@ (80011dc <__NVIC_SetPriorityGrouping+0x40>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00
 80011e0:	05fa0000 	.word	0x05fa0000

080011e4 <__NVIC_GetPriorityGrouping>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_SetPriority>:
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	@ (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	@ (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	@ 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	@ 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff47 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff5e 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff90 	bl	8001254 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5f 	bl	8001200 <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffb2 	bl	80012bc <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001372:	4b89      	ldr	r3, [pc, #548]	@ (8001598 <HAL_GPIO_Init+0x234>)
 8001374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001376:	e194      	b.n	80016a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8186 	beq.w	800169c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d005      	beq.n	80013a8 <HAL_GPIO_Init+0x44>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d130      	bne.n	800140a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013de:	2201      	movs	r2, #1
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	f003 0201 	and.w	r2, r3, #1
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b03      	cmp	r3, #3
 8001414:	d017      	beq.n	8001446 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d123      	bne.n	800149a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	69b9      	ldr	r1, [r7, #24]
 8001496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0203 	and.w	r2, r3, #3
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80e0 	beq.w	800169c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014dc:	4b2f      	ldr	r3, [pc, #188]	@ (800159c <HAL_GPIO_Init+0x238>)
 80014de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014e2:	4a2e      	ldr	r2, [pc, #184]	@ (800159c <HAL_GPIO_Init+0x238>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014ec:	4b2b      	ldr	r3, [pc, #172]	@ (800159c <HAL_GPIO_Init+0x238>)
 80014ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fa:	4a29      	ldr	r2, [pc, #164]	@ (80015a0 <HAL_GPIO_Init+0x23c>)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a20      	ldr	r2, [pc, #128]	@ (80015a4 <HAL_GPIO_Init+0x240>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d052      	beq.n	80015cc <HAL_GPIO_Init+0x268>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a1f      	ldr	r2, [pc, #124]	@ (80015a8 <HAL_GPIO_Init+0x244>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d031      	beq.n	8001592 <HAL_GPIO_Init+0x22e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a1e      	ldr	r2, [pc, #120]	@ (80015ac <HAL_GPIO_Init+0x248>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d02b      	beq.n	800158e <HAL_GPIO_Init+0x22a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a1d      	ldr	r2, [pc, #116]	@ (80015b0 <HAL_GPIO_Init+0x24c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d025      	beq.n	800158a <HAL_GPIO_Init+0x226>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a1c      	ldr	r2, [pc, #112]	@ (80015b4 <HAL_GPIO_Init+0x250>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01f      	beq.n	8001586 <HAL_GPIO_Init+0x222>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a1b      	ldr	r2, [pc, #108]	@ (80015b8 <HAL_GPIO_Init+0x254>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d019      	beq.n	8001582 <HAL_GPIO_Init+0x21e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a1a      	ldr	r2, [pc, #104]	@ (80015bc <HAL_GPIO_Init+0x258>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x21a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a19      	ldr	r2, [pc, #100]	@ (80015c0 <HAL_GPIO_Init+0x25c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x216>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a18      	ldr	r2, [pc, #96]	@ (80015c4 <HAL_GPIO_Init+0x260>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x212>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <HAL_GPIO_Init+0x264>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x20e>
 800156e:	2309      	movs	r3, #9
 8001570:	e02d      	b.n	80015ce <HAL_GPIO_Init+0x26a>
 8001572:	230a      	movs	r3, #10
 8001574:	e02b      	b.n	80015ce <HAL_GPIO_Init+0x26a>
 8001576:	2308      	movs	r3, #8
 8001578:	e029      	b.n	80015ce <HAL_GPIO_Init+0x26a>
 800157a:	2307      	movs	r3, #7
 800157c:	e027      	b.n	80015ce <HAL_GPIO_Init+0x26a>
 800157e:	2306      	movs	r3, #6
 8001580:	e025      	b.n	80015ce <HAL_GPIO_Init+0x26a>
 8001582:	2305      	movs	r3, #5
 8001584:	e023      	b.n	80015ce <HAL_GPIO_Init+0x26a>
 8001586:	2304      	movs	r3, #4
 8001588:	e021      	b.n	80015ce <HAL_GPIO_Init+0x26a>
 800158a:	2303      	movs	r3, #3
 800158c:	e01f      	b.n	80015ce <HAL_GPIO_Init+0x26a>
 800158e:	2302      	movs	r3, #2
 8001590:	e01d      	b.n	80015ce <HAL_GPIO_Init+0x26a>
 8001592:	2301      	movs	r3, #1
 8001594:	e01b      	b.n	80015ce <HAL_GPIO_Init+0x26a>
 8001596:	bf00      	nop
 8001598:	58000080 	.word	0x58000080
 800159c:	58024400 	.word	0x58024400
 80015a0:	58000400 	.word	0x58000400
 80015a4:	58020000 	.word	0x58020000
 80015a8:	58020400 	.word	0x58020400
 80015ac:	58020800 	.word	0x58020800
 80015b0:	58020c00 	.word	0x58020c00
 80015b4:	58021000 	.word	0x58021000
 80015b8:	58021400 	.word	0x58021400
 80015bc:	58021800 	.word	0x58021800
 80015c0:	58021c00 	.word	0x58021c00
 80015c4:	58022000 	.word	0x58022000
 80015c8:	58022400 	.word	0x58022400
 80015cc:	2300      	movs	r3, #0
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	f002 0203 	and.w	r2, r2, #3
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	4093      	lsls	r3, r2
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015de:	4938      	ldr	r1, [pc, #224]	@ (80016c0 <HAL_GPIO_Init+0x35c>)
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3302      	adds	r3, #2
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001612:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800161a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001640:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	3301      	adds	r3, #1
 80016a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f47f ae63 	bne.w	8001378 <HAL_GPIO_Init+0x14>
  }
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	3724      	adds	r7, #36	@ 0x24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	58000400 	.word	0x58000400

080016c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016d2:	4b75      	ldr	r3, [pc, #468]	@ (80018a8 <HAL_GPIO_DeInit+0x1e4>)
 80016d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80016d6:	e0d9      	b.n	800188c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80016d8:	2201      	movs	r2, #1
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	4013      	ands	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80cc 	beq.w	8001886 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80016ee:	4a6f      	ldr	r2, [pc, #444]	@ (80018ac <HAL_GPIO_DeInit+0x1e8>)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fa:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	220f      	movs	r2, #15
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a67      	ldr	r2, [pc, #412]	@ (80018b0 <HAL_GPIO_DeInit+0x1ec>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d037      	beq.n	8001788 <HAL_GPIO_DeInit+0xc4>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a66      	ldr	r2, [pc, #408]	@ (80018b4 <HAL_GPIO_DeInit+0x1f0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d031      	beq.n	8001784 <HAL_GPIO_DeInit+0xc0>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a65      	ldr	r2, [pc, #404]	@ (80018b8 <HAL_GPIO_DeInit+0x1f4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d02b      	beq.n	8001780 <HAL_GPIO_DeInit+0xbc>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a64      	ldr	r2, [pc, #400]	@ (80018bc <HAL_GPIO_DeInit+0x1f8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d025      	beq.n	800177c <HAL_GPIO_DeInit+0xb8>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a63      	ldr	r2, [pc, #396]	@ (80018c0 <HAL_GPIO_DeInit+0x1fc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d01f      	beq.n	8001778 <HAL_GPIO_DeInit+0xb4>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a62      	ldr	r2, [pc, #392]	@ (80018c4 <HAL_GPIO_DeInit+0x200>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d019      	beq.n	8001774 <HAL_GPIO_DeInit+0xb0>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a61      	ldr	r2, [pc, #388]	@ (80018c8 <HAL_GPIO_DeInit+0x204>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d013      	beq.n	8001770 <HAL_GPIO_DeInit+0xac>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a60      	ldr	r2, [pc, #384]	@ (80018cc <HAL_GPIO_DeInit+0x208>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d00d      	beq.n	800176c <HAL_GPIO_DeInit+0xa8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a5f      	ldr	r2, [pc, #380]	@ (80018d0 <HAL_GPIO_DeInit+0x20c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d007      	beq.n	8001768 <HAL_GPIO_DeInit+0xa4>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a5e      	ldr	r2, [pc, #376]	@ (80018d4 <HAL_GPIO_DeInit+0x210>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d101      	bne.n	8001764 <HAL_GPIO_DeInit+0xa0>
 8001760:	2309      	movs	r3, #9
 8001762:	e012      	b.n	800178a <HAL_GPIO_DeInit+0xc6>
 8001764:	230a      	movs	r3, #10
 8001766:	e010      	b.n	800178a <HAL_GPIO_DeInit+0xc6>
 8001768:	2308      	movs	r3, #8
 800176a:	e00e      	b.n	800178a <HAL_GPIO_DeInit+0xc6>
 800176c:	2307      	movs	r3, #7
 800176e:	e00c      	b.n	800178a <HAL_GPIO_DeInit+0xc6>
 8001770:	2306      	movs	r3, #6
 8001772:	e00a      	b.n	800178a <HAL_GPIO_DeInit+0xc6>
 8001774:	2305      	movs	r3, #5
 8001776:	e008      	b.n	800178a <HAL_GPIO_DeInit+0xc6>
 8001778:	2304      	movs	r3, #4
 800177a:	e006      	b.n	800178a <HAL_GPIO_DeInit+0xc6>
 800177c:	2303      	movs	r3, #3
 800177e:	e004      	b.n	800178a <HAL_GPIO_DeInit+0xc6>
 8001780:	2302      	movs	r3, #2
 8001782:	e002      	b.n	800178a <HAL_GPIO_DeInit+0xc6>
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <HAL_GPIO_DeInit+0xc6>
 8001788:	2300      	movs	r3, #0
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	f002 0203 	and.w	r2, r2, #3
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	4093      	lsls	r3, r2
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	429a      	cmp	r2, r3
 8001798:	d136      	bne.n	8001808 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	401a      	ands	r2, r3
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80017b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	43db      	mvns	r3, r3
 80017c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017c4:	4013      	ands	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80017c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017d6:	4013      	ands	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	220f      	movs	r2, #15
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80017ea:	4a30      	ldr	r2, [pc, #192]	@ (80018ac <HAL_GPIO_DeInit+0x1e8>)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	43da      	mvns	r2, r3
 80017fa:	482c      	ldr	r0, [pc, #176]	@ (80018ac <HAL_GPIO_DeInit+0x1e8>)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	400a      	ands	r2, r1
 8001802:	3302      	adds	r3, #2
 8001804:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2103      	movs	r1, #3
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	08d2      	lsrs	r2, r2, #3
 800183c:	4019      	ands	r1, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3208      	adds	r2, #8
 8001842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2103      	movs	r1, #3
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	401a      	ands	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	2101      	movs	r1, #1
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2103      	movs	r1, #3
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	401a      	ands	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	f47f af1f 	bne.w	80016d8 <HAL_GPIO_DeInit+0x14>
  }
}
 800189a:	bf00      	nop
 800189c:	bf00      	nop
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	58000080 	.word	0x58000080
 80018ac:	58000400 	.word	0x58000400
 80018b0:	58020000 	.word	0x58020000
 80018b4:	58020400 	.word	0x58020400
 80018b8:	58020800 	.word	0x58020800
 80018bc:	58020c00 	.word	0x58020c00
 80018c0:	58021000 	.word	0x58021000
 80018c4:	58021400 	.word	0x58021400
 80018c8:	58021800 	.word	0x58021800
 80018cc:	58021c00 	.word	0x58021c00
 80018d0:	58022000 	.word	0x58022000
 80018d4:	58022400 	.word	0x58022400

080018d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
 80018e4:	4613      	mov	r3, r2
 80018e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e8:	787b      	ldrb	r3, [r7, #1]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80018f4:	e003      	b.n	80018fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	041a      	lsls	r2, r3, #16
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	619a      	str	r2, [r3, #24]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001914:	4b19      	ldr	r3, [pc, #100]	@ (800197c <HAL_PWREx_ConfigSupply+0x70>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b04      	cmp	r3, #4
 800191e:	d00a      	beq.n	8001936 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <HAL_PWREx_ConfigSupply+0x70>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	429a      	cmp	r2, r3
 800192c:	d001      	beq.n	8001932 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e01f      	b.n	8001972 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e01d      	b.n	8001972 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <HAL_PWREx_ConfigSupply+0x70>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f023 0207 	bic.w	r2, r3, #7
 800193e:	490f      	ldr	r1, [pc, #60]	@ (800197c <HAL_PWREx_ConfigSupply+0x70>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4313      	orrs	r3, r2
 8001944:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001946:	f7ff fc11 	bl	800116c <HAL_GetTick>
 800194a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800194c:	e009      	b.n	8001962 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800194e:	f7ff fc0d 	bl	800116c <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800195c:	d901      	bls.n	8001962 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e007      	b.n	8001972 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <HAL_PWREx_ConfigSupply+0x70>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800196a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800196e:	d1ee      	bne.n	800194e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	58024800 	.word	0x58024800

08001980 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af02      	add	r7, sp, #8
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff fbf0 	bl	800116c <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e05f      	b.n	8001a58 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7fe fee9 	bl	800077c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80019aa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fae0 	bl	8001f74 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	021a      	lsls	r2, r3, #8
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	2120      	movs	r1, #32
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fad8 	bl	8001f90 <QSPI_WaitFlagStateUntilTimeout>
 80019e0:	4603      	mov	r3, r0
 80019e2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80019e4:	7afb      	ldrb	r3, [r7, #11]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d135      	bne.n	8001a56 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <HAL_QSPI_Init+0xe0>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6852      	ldr	r2, [r2, #4]
 80019f8:	0611      	lsls	r1, r2, #24
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68d2      	ldr	r2, [r2, #12]
 80019fe:	4311      	orrs	r1, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	69d2      	ldr	r2, [r2, #28]
 8001a04:	4311      	orrs	r1, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6a12      	ldr	r2, [r2, #32]
 8001a0a:	4311      	orrs	r1, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	430b      	orrs	r3, r1
 8001a12:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_QSPI_Init+0xe4>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6912      	ldr	r2, [r2, #16]
 8001a22:	0411      	lsls	r1, r2, #16
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6952      	ldr	r2, [r2, #20]
 8001a28:	4311      	orrs	r1, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6992      	ldr	r2, [r2, #24]
 8001a2e:	4311      	orrs	r1, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	430b      	orrs	r3, r1
 8001a36:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8001a56:	7afb      	ldrb	r3, [r7, #11]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	00ffff2f 	.word	0x00ffff2f
 8001a64:	ffe0f8fe 	.word	0xffe0f8fe

08001a68 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e012      	b.n	8001aa0 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0201 	bic.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7fe ff40 	bl	8000910 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff fb5a 	bl	800116c <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_QSPI_Command+0x22>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e048      	b.n	8001b5c <HAL_QSPI_Command+0xb4>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d137      	bne.n	8001b4e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2200      	movs	r2, #0
 8001af4:	2120      	movs	r1, #32
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 fa4a 	bl	8001f90 <QSPI_WaitFlagStateUntilTimeout>
 8001afc:	4603      	mov	r3, r0
 8001afe:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001b00:	7dfb      	ldrb	r3, [r7, #23]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d125      	bne.n	8001b52 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001b06:	2200      	movs	r2, #0
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 fa77 	bl	8001ffe <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d115      	bne.n	8001b44 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	2102      	movs	r1, #2
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fa34 	bl	8001f90 <QSPI_WaitFlagStateUntilTimeout>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10f      	bne.n	8001b52 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2202      	movs	r2, #2
 8001b38:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b42:	e006      	b.n	8001b52 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b4c:	e001      	b.n	8001b52 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	@ 0x28
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff fafa 	bl	800116c <HAL_GetTick>
 8001b78:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	3320      	adds	r3, #32
 8001b80:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_QSPI_Transmit+0x2e>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e076      	b.n	8001c80 <HAL_QSPI_Transmit+0x11c>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d165      	bne.n	8001c72 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d056      	beq.n	8001c60 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2212      	movs	r2, #18
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8001be6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8001be8:	e01b      	b.n	8001c22 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f9cb 	bl	8001f90 <QSPI_WaitFlagStateUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d113      	bne.n	8001c2c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1c:	1e5a      	subs	r2, r3, #1
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1df      	bne.n	8001bea <HAL_QSPI_Transmit+0x86>
 8001c2a:	e000      	b.n	8001c2e <HAL_QSPI_Transmit+0xca>
          break;
 8001c2c:	bf00      	nop
      }

      if (status == HAL_OK)
 8001c2e:	7ffb      	ldrb	r3, [r7, #31]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d110      	bne.n	8001c56 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f9a6 	bl	8001f90 <QSPI_WaitFlagStateUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8001c48:	7ffb      	ldrb	r3, [r7, #31]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d103      	bne.n	8001c56 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2202      	movs	r2, #2
 8001c54:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001c5e:	e00a      	b.n	8001c76 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c64:	f043 0208 	orr.w	r2, r3, #8
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	77fb      	strb	r3, [r7, #31]
 8001c70:	e001      	b.n	8001c76 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001c72:	2302      	movs	r3, #2
 8001c74:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8001c7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3720      	adds	r7, #32
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	@ 0x28
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff fa68 	bl	800116c <HAL_GetTick>
 8001c9c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3320      	adds	r3, #32
 8001cac:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_QSPI_Receive+0x36>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e07d      	b.n	8001dba <HAL_QSPI_Receive+0x132>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d16c      	bne.n	8001dac <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d05d      	beq.n	8001d9a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2222      	movs	r2, #34	@ 0x22
 8001ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001d16:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8001d20:	e01c      	b.n	8001d5c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	2106      	movs	r1, #6
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 f92f 	bl	8001f90 <QSPI_WaitFlagStateUntilTimeout>
 8001d32:	4603      	mov	r3, r0
 8001d34:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8001d36:	7ffb      	ldrb	r3, [r7, #31]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d114      	bne.n	8001d66 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	7812      	ldrb	r2, [r2, #0]
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d56:	1e5a      	subs	r2, r3, #1
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1de      	bne.n	8001d22 <HAL_QSPI_Receive+0x9a>
 8001d64:	e000      	b.n	8001d68 <HAL_QSPI_Receive+0xe0>
          break;
 8001d66:	bf00      	nop
      }

      if (status == HAL_OK)
 8001d68:	7ffb      	ldrb	r3, [r7, #31]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d110      	bne.n	8001d90 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2201      	movs	r2, #1
 8001d76:	2102      	movs	r1, #2
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 f909 	bl	8001f90 <QSPI_WaitFlagStateUntilTimeout>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8001d82:	7ffb      	ldrb	r3, [r7, #31]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d103      	bne.n	8001d90 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001d98:	e00a      	b.n	8001db0 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f043 0208 	orr.w	r2, r3, #8
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	77fb      	strb	r3, [r7, #31]
 8001daa:	e001      	b.n	8001db0 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001dac:	2302      	movs	r3, #2
 8001dae:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8001db8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3720      	adds	r7, #32
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b088      	sub	sp, #32
 8001dc6:	af02      	add	r7, sp, #8
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff f9cc 	bl	800116c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_QSPI_AutoPolling+0x24>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e060      	b.n	8001ea8 <HAL_QSPI_AutoPolling+0xe6>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d14f      	bne.n	8001e9a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2242      	movs	r2, #66	@ 0x42
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2120      	movs	r1, #32
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 f8bc 	bl	8001f90 <QSPI_WaitFlagStateUntilTimeout>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d13d      	bne.n	8001e9e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6852      	ldr	r2, [r2, #4]
 8001e34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6892      	ldr	r2, [r2, #8]
 8001e3e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001e58:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8001e62:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 f8c8 	bl	8001ffe <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	2201      	movs	r2, #1
 8001e76:	2108      	movs	r1, #8
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 f889 	bl	8001f90 <QSPI_WaitFlagStateUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10a      	bne.n	8001e9e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001e98:	e001      	b.n	8001e9e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	f7ff f956 	bl	800116c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_QSPI_MemoryMapped+0x22>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e04c      	b.n	8001f6c <HAL_QSPI_MemoryMapped+0xbc>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d13b      	bne.n	8001f5e <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2282      	movs	r2, #130	@ 0x82
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	2200      	movs	r2, #0
 8001efe:	2120      	movs	r1, #32
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 f845 	bl	8001f90 <QSPI_WaitFlagStateUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d128      	bne.n	8001f62 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 0108 	bic.w	r1, r3, #8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d110      	bne.n	8001f50 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001f4e:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8001f50:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f851 	bl	8001ffe <QSPI_Config>
 8001f5c:	e001      	b.n	8001f62 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8001f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001fa0:	e01a      	b.n	8001fd8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d016      	beq.n	8001fd8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001faa:	f7ff f8df 	bl	800116c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d302      	bcc.n	8001fc0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10b      	bne.n	8001fd8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e00e      	b.n	8001ff6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	bf14      	ite	ne
 8001fe6:	2301      	movne	r3, #1
 8001fe8:	2300      	moveq	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d1d6      	bne.n	8001fa2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <QSPI_Config+0x28>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8002018:	d005      	beq.n	8002026 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3a01      	subs	r2, #1
 8002024:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80c1 	beq.w	80021b2 <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d063      	beq.n	8002100 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	6892      	ldr	r2, [r2, #8]
 8002040:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d031      	beq.n	80020ae <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	431a      	orrs	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002058:	431a      	orrs	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	431a      	orrs	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	049b      	lsls	r3, r3, #18
 8002066:	431a      	orrs	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	431a      	orrs	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	431a      	orrs	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	431a      	orrs	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	431a      	orrs	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	431a      	orrs	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	ea42 0103 	orr.w	r1, r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	430a      	orrs	r2, r1
 8002096:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800209e:	f000 813f 	beq.w	8002320 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	6852      	ldr	r2, [r2, #4]
 80020aa:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 80020ac:	e138      	b.n	8002320 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	431a      	orrs	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020bc:	431a      	orrs	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	431a      	orrs	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	049b      	lsls	r3, r3, #18
 80020ca:	431a      	orrs	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	431a      	orrs	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	ea42 0103 	orr.w	r1, r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2200      	movs	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
}
 80020fe:	e10f      	b.n	8002320 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d02e      	beq.n	8002166 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002110:	431a      	orrs	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002116:	431a      	orrs	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	431a      	orrs	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	049b      	lsls	r3, r3, #18
 8002124:	431a      	orrs	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	431a      	orrs	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	431a      	orrs	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	431a      	orrs	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	431a      	orrs	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	ea42 0103 	orr.w	r1, r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	430a      	orrs	r2, r1
 800214e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8002156:	f000 80e3 	beq.w	8002320 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	6852      	ldr	r2, [r2, #4]
 8002162:	619a      	str	r2, [r3, #24]
}
 8002164:	e0dc      	b.n	8002320 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	431a      	orrs	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002174:	431a      	orrs	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	431a      	orrs	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	049b      	lsls	r3, r3, #18
 8002182:	431a      	orrs	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	431a      	orrs	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	431a      	orrs	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	431a      	orrs	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	ea42 0103 	orr.w	r1, r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
}
 80021b0:	e0b6      	b.n	8002320 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d05d      	beq.n	8002276 <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	6892      	ldr	r2, [r2, #8]
 80021c2:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d02e      	beq.n	800222a <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	431a      	orrs	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021da:	431a      	orrs	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	431a      	orrs	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	049b      	lsls	r3, r3, #18
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	431a      	orrs	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	431a      	orrs	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	ea42 0103 	orr.w	r1, r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	430a      	orrs	r2, r1
 8002212:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800221a:	f000 8081 	beq.w	8002320 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	6852      	ldr	r2, [r2, #4]
 8002226:	619a      	str	r2, [r3, #24]
}
 8002228:	e07a      	b.n	8002320 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	431a      	orrs	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002238:	431a      	orrs	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	431a      	orrs	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	049b      	lsls	r3, r3, #18
 8002246:	431a      	orrs	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	431a      	orrs	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	431a      	orrs	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	431a      	orrs	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	ea42 0103 	orr.w	r1, r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	430a      	orrs	r2, r1
 800226a:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
}
 8002274:	e054      	b.n	8002320 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d02a      	beq.n	80022d4 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	431a      	orrs	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228c:	431a      	orrs	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002292:	431a      	orrs	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	049b      	lsls	r3, r3, #18
 800229a:	431a      	orrs	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	431a      	orrs	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	ea42 0103 	orr.w	r1, r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	430a      	orrs	r2, r1
 80022be:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80022c6:	d02b      	beq.n	8002320 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	6852      	ldr	r2, [r2, #4]
 80022d0:	619a      	str	r2, [r3, #24]
}
 80022d2:	e025      	b.n	8002320 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d021      	beq.n	8002320 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ea:	431a      	orrs	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f0:	431a      	orrs	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	049b      	lsls	r3, r3, #18
 80022f8:	431a      	orrs	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	431a      	orrs	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	431a      	orrs	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	ea42 0103 	orr.w	r1, r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	430a      	orrs	r2, r1
 8002316:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	@ 0x30
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	f000 bc48 	b.w	8002bd0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8088 	beq.w	800245e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234e:	4b99      	ldr	r3, [pc, #612]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002356:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002358:	4b96      	ldr	r3, [pc, #600]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800235e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002360:	2b10      	cmp	r3, #16
 8002362:	d007      	beq.n	8002374 <HAL_RCC_OscConfig+0x48>
 8002364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002366:	2b18      	cmp	r3, #24
 8002368:	d111      	bne.n	800238e <HAL_RCC_OscConfig+0x62>
 800236a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d10c      	bne.n	800238e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	4b8f      	ldr	r3, [pc, #572]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d06d      	beq.n	800245c <HAL_RCC_OscConfig+0x130>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d169      	bne.n	800245c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	f000 bc21 	b.w	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x7a>
 8002398:	4b86      	ldr	r3, [pc, #536]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a85      	ldr	r2, [pc, #532]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 800239e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	e02e      	b.n	8002404 <HAL_RCC_OscConfig+0xd8>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x9c>
 80023ae:	4b81      	ldr	r3, [pc, #516]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a80      	ldr	r2, [pc, #512]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b7e      	ldr	r3, [pc, #504]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7d      	ldr	r2, [pc, #500]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e01d      	b.n	8002404 <HAL_RCC_OscConfig+0xd8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0xc0>
 80023d2:	4b78      	ldr	r3, [pc, #480]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a77      	ldr	r2, [pc, #476]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b75      	ldr	r3, [pc, #468]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a74      	ldr	r2, [pc, #464]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0xd8>
 80023ec:	4b71      	ldr	r3, [pc, #452]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a70      	ldr	r2, [pc, #448]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b6e      	ldr	r3, [pc, #440]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a6d      	ldr	r2, [pc, #436]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d013      	beq.n	8002434 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe feae 	bl	800116c <HAL_GetTick>
 8002410:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7fe feaa 	bl	800116c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	@ 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e3d4      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002426:	4b63      	ldr	r3, [pc, #396]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0xe8>
 8002432:	e014      	b.n	800245e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe fe9a 	bl	800116c <HAL_GetTick>
 8002438:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243c:	f7fe fe96 	bl	800116c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	@ 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e3c0      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800244e:	4b59      	ldr	r3, [pc, #356]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x110>
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 80ca 	beq.w	8002600 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246c:	4b51      	ldr	r3, [pc, #324]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002474:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002476:	4b4f      	ldr	r3, [pc, #316]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <HAL_RCC_OscConfig+0x166>
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	2b18      	cmp	r3, #24
 8002486:	d156      	bne.n	8002536 <HAL_RCC_OscConfig+0x20a>
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d151      	bne.n	8002536 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002492:	4b48      	ldr	r3, [pc, #288]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x17e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e392      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024aa:	4b42      	ldr	r3, [pc, #264]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 0219 	bic.w	r2, r3, #25
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	493f      	ldr	r1, [pc, #252]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe fe56 	bl	800116c <HAL_GetTick>
 80024c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c4:	f7fe fe52 	bl	800116c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e37c      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024d6:	4b37      	ldr	r3, [pc, #220]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e2:	f7fe fe4f 	bl	8001184 <HAL_GetREVID>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d817      	bhi.n	8002520 <HAL_RCC_OscConfig+0x1f4>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	2b40      	cmp	r3, #64	@ 0x40
 80024f6:	d108      	bne.n	800250a <HAL_RCC_OscConfig+0x1de>
 80024f8:	4b2e      	ldr	r3, [pc, #184]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002500:	4a2c      	ldr	r2, [pc, #176]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002506:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	e07a      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250a:	4b2a      	ldr	r3, [pc, #168]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	031b      	lsls	r3, r3, #12
 8002518:	4926      	ldr	r1, [pc, #152]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800251e:	e06f      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	4921      	ldr	r1, [pc, #132]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002534:	e064      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d047      	beq.n	80025ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800253e:	4b1d      	ldr	r3, [pc, #116]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 0219 	bic.w	r2, r3, #25
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	491a      	ldr	r1, [pc, #104]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fe0c 	bl	800116c <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002558:	f7fe fe08 	bl	800116c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e332      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800256a:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	f7fe fe05 	bl	8001184 <HAL_GetREVID>
 800257a:	4603      	mov	r3, r0
 800257c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002580:	4293      	cmp	r3, r2
 8002582:	d819      	bhi.n	80025b8 <HAL_RCC_OscConfig+0x28c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b40      	cmp	r3, #64	@ 0x40
 800258a:	d108      	bne.n	800259e <HAL_RCC_OscConfig+0x272>
 800258c:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002594:	4a07      	ldr	r2, [pc, #28]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800259a:	6053      	str	r3, [r2, #4]
 800259c:	e030      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
 800259e:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	031b      	lsls	r3, r3, #12
 80025ac:	4901      	ldr	r1, [pc, #4]	@ (80025b4 <HAL_RCC_OscConfig+0x288>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
 80025b2:	e025      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
 80025b4:	58024400 	.word	0x58024400
 80025b8:	4b9a      	ldr	r3, [pc, #616]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	061b      	lsls	r3, r3, #24
 80025c6:	4997      	ldr	r1, [pc, #604]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
 80025cc:	e018      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	4b95      	ldr	r3, [pc, #596]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a94      	ldr	r2, [pc, #592]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7fe fdc7 	bl	800116c <HAL_GetTick>
 80025de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7fe fdc3 	bl	800116c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e2ed      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025f4:	4b8b      	ldr	r3, [pc, #556]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80a9 	beq.w	8002760 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4b85      	ldr	r3, [pc, #532]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002616:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002618:	4b82      	ldr	r3, [pc, #520]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d007      	beq.n	8002634 <HAL_RCC_OscConfig+0x308>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b18      	cmp	r3, #24
 8002628:	d13a      	bne.n	80026a0 <HAL_RCC_OscConfig+0x374>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d135      	bne.n	80026a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002634:	4b7b      	ldr	r3, [pc, #492]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_OscConfig+0x320>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b80      	cmp	r3, #128	@ 0x80
 8002646:	d001      	beq.n	800264c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e2c1      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800264c:	f7fe fd9a 	bl	8001184 <HAL_GetREVID>
 8002650:	4603      	mov	r3, r0
 8002652:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002656:	4293      	cmp	r3, r2
 8002658:	d817      	bhi.n	800268a <HAL_RCC_OscConfig+0x35e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	2b20      	cmp	r3, #32
 8002660:	d108      	bne.n	8002674 <HAL_RCC_OscConfig+0x348>
 8002662:	4b70      	ldr	r3, [pc, #448]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800266a:	4a6e      	ldr	r2, [pc, #440]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800266c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002670:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002672:	e075      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002674:	4b6b      	ldr	r3, [pc, #428]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	069b      	lsls	r3, r3, #26
 8002682:	4968      	ldr	r1, [pc, #416]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002688:	e06a      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800268a:	4b66      	ldr	r3, [pc, #408]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	061b      	lsls	r3, r3, #24
 8002698:	4962      	ldr	r1, [pc, #392]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800269a:	4313      	orrs	r3, r2
 800269c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800269e:	e05f      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d042      	beq.n	800272e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fd5a 	bl	800116c <HAL_GetTick>
 80026b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026bc:	f7fe fd56 	bl	800116c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e280      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ce:	4b55      	ldr	r3, [pc, #340]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026da:	f7fe fd53 	bl	8001184 <HAL_GetREVID>
 80026de:	4603      	mov	r3, r0
 80026e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d817      	bhi.n	8002718 <HAL_RCC_OscConfig+0x3ec>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d108      	bne.n	8002702 <HAL_RCC_OscConfig+0x3d6>
 80026f0:	4b4c      	ldr	r3, [pc, #304]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80026f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026fe:	6053      	str	r3, [r2, #4]
 8002700:	e02e      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
 8002702:	4b48      	ldr	r3, [pc, #288]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	069b      	lsls	r3, r3, #26
 8002710:	4944      	ldr	r1, [pc, #272]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
 8002716:	e023      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
 8002718:	4b42      	ldr	r3, [pc, #264]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	493f      	ldr	r1, [pc, #252]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	4313      	orrs	r3, r2
 800272a:	60cb      	str	r3, [r1, #12]
 800272c:	e018      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800272e:	4b3d      	ldr	r3, [pc, #244]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a3c      	ldr	r2, [pc, #240]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002734:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe fd17 	bl	800116c <HAL_GetTick>
 800273e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002742:	f7fe fd13 	bl	800116c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e23d      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002754:	4b33      	ldr	r3, [pc, #204]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d036      	beq.n	80027da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d019      	beq.n	80027a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002774:	4b2b      	ldr	r3, [pc, #172]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002778:	4a2a      	ldr	r2, [pc, #168]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7fe fcf4 	bl	800116c <HAL_GetTick>
 8002784:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002788:	f7fe fcf0 	bl	800116c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e21a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800279a:	4b22      	ldr	r3, [pc, #136]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800279c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x45c>
 80027a6:	e018      	b.n	80027da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b4:	f7fe fcda 	bl	800116c <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027bc:	f7fe fcd6 	bl	800116c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e200      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d039      	beq.n	800285a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01c      	beq.n	8002828 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027fa:	f7fe fcb7 	bl	800116c <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002802:	f7fe fcb3 	bl	800116c <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1dd      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002814:	4b03      	ldr	r3, [pc, #12]	@ (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x4d6>
 8002820:	e01b      	b.n	800285a <HAL_RCC_OscConfig+0x52e>
 8002822:	bf00      	nop
 8002824:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002828:	4b9b      	ldr	r3, [pc, #620]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a9a      	ldr	r2, [pc, #616]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 800282e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002832:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002834:	f7fe fc9a 	bl	800116c <HAL_GetTick>
 8002838:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800283c:	f7fe fc96 	bl	800116c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e1c0      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800284e:	4b92      	ldr	r3, [pc, #584]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8081 	beq.w	800296a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002868:	4b8c      	ldr	r3, [pc, #560]	@ (8002a9c <HAL_RCC_OscConfig+0x770>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a8b      	ldr	r2, [pc, #556]	@ (8002a9c <HAL_RCC_OscConfig+0x770>)
 800286e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002872:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002874:	f7fe fc7a 	bl	800116c <HAL_GetTick>
 8002878:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287c:	f7fe fc76 	bl	800116c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	@ 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e1a0      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800288e:	4b83      	ldr	r3, [pc, #524]	@ (8002a9c <HAL_RCC_OscConfig+0x770>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0x584>
 80028a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ae:	e02d      	b.n	800290c <HAL_RCC_OscConfig+0x5e0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10c      	bne.n	80028d2 <HAL_RCC_OscConfig+0x5a6>
 80028b8:	4b77      	ldr	r3, [pc, #476]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028bc:	4a76      	ldr	r2, [pc, #472]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c4:	4b74      	ldr	r3, [pc, #464]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c8:	4a73      	ldr	r2, [pc, #460]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028ca:	f023 0304 	bic.w	r3, r3, #4
 80028ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d0:	e01c      	b.n	800290c <HAL_RCC_OscConfig+0x5e0>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b05      	cmp	r3, #5
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c8>
 80028da:	4b6f      	ldr	r3, [pc, #444]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028de:	4a6e      	ldr	r2, [pc, #440]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ea:	4a6b      	ldr	r2, [pc, #428]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0x5e0>
 80028f4:	4b68      	ldr	r3, [pc, #416]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f8:	4a67      	ldr	r2, [pc, #412]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002900:	4b65      	ldr	r3, [pc, #404]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002904:	4a64      	ldr	r2, [pc, #400]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002906:	f023 0304 	bic.w	r3, r3, #4
 800290a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe fc2a 	bl	800116c <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800291a:	e00a      	b.n	8002932 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291c:	f7fe fc26 	bl	800116c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e14e      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002932:	4b59      	ldr	r3, [pc, #356]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ee      	beq.n	800291c <HAL_RCC_OscConfig+0x5f0>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002940:	f7fe fc14 	bl	800116c <HAL_GetTick>
 8002944:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002946:	e00a      	b.n	800295e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002948:	f7fe fc10 	bl	800116c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e138      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800295e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ee      	bne.n	8002948 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 812d 	beq.w	8002bce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002974:	4b48      	ldr	r3, [pc, #288]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800297c:	2b18      	cmp	r3, #24
 800297e:	f000 80bd 	beq.w	8002afc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	2b02      	cmp	r3, #2
 8002988:	f040 809e 	bne.w	8002ac8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298c:	4b42      	ldr	r3, [pc, #264]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a41      	ldr	r2, [pc, #260]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002992:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe fbe8 	bl	800116c <HAL_GetTick>
 800299c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe fbe4 	bl	800116c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e10e      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029b2:	4b39      	ldr	r3, [pc, #228]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029be:	4b36      	ldr	r3, [pc, #216]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80029c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c2:	4b37      	ldr	r3, [pc, #220]	@ (8002aa0 <HAL_RCC_OscConfig+0x774>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029ce:	0112      	lsls	r2, r2, #4
 80029d0:	430a      	orrs	r2, r1
 80029d2:	4931      	ldr	r1, [pc, #196]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029dc:	3b01      	subs	r3, #1
 80029de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e6:	3b01      	subs	r3, #1
 80029e8:	025b      	lsls	r3, r3, #9
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f2:	3b01      	subs	r3, #1
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a00:	3b01      	subs	r3, #1
 8002a02:	061b      	lsls	r3, r3, #24
 8002a04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a08:	4923      	ldr	r1, [pc, #140]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a0e:	4b22      	ldr	r3, [pc, #136]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a12:	4a21      	ldr	r2, [pc, #132]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a1e:	4b21      	ldr	r3, [pc, #132]	@ (8002aa4 <HAL_RCC_OscConfig+0x778>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a26:	00d2      	lsls	r2, r2, #3
 8002a28:	491b      	ldr	r1, [pc, #108]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	f023 020c 	bic.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	4917      	ldr	r1, [pc, #92]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a40:	4b15      	ldr	r3, [pc, #84]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a44:	f023 0202 	bic.w	r2, r3, #2
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4c:	4912      	ldr	r1, [pc, #72]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a52:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a56:	4a10      	ldr	r2, [pc, #64]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a62:	4a0d      	ldr	r2, [pc, #52]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a76:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7a:	4a07      	ldr	r2, [pc, #28]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a82:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a04      	ldr	r2, [pc, #16]	@ (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7fe fb6d 	bl	800116c <HAL_GetTick>
 8002a92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a94:	e011      	b.n	8002aba <HAL_RCC_OscConfig+0x78e>
 8002a96:	bf00      	nop
 8002a98:	58024400 	.word	0x58024400
 8002a9c:	58024800 	.word	0x58024800
 8002aa0:	fffffc0c 	.word	0xfffffc0c
 8002aa4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe fb60 	bl	800116c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e08a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aba:	4b47      	ldr	r3, [pc, #284]	@ (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x77c>
 8002ac6:	e082      	b.n	8002bce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac8:	4b43      	ldr	r3, [pc, #268]	@ (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a42      	ldr	r2, [pc, #264]	@ (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002ace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fb4a 	bl	800116c <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fe fb46 	bl	800116c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e070      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aee:	4b3a      	ldr	r3, [pc, #232]	@ (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x7b0>
 8002afa:	e068      	b.n	8002bce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002afc:	4b36      	ldr	r3, [pc, #216]	@ (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b02:	4b35      	ldr	r3, [pc, #212]	@ (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d031      	beq.n	8002b74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f003 0203 	and.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d12a      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d122      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d11a      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	0a5b      	lsrs	r3, r3, #9
 8002b42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d111      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	0c1b      	lsrs	r3, r3, #16
 8002b54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d108      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	0e1b      	lsrs	r3, r3, #24
 8002b66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e02b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b78:	4b17      	ldr	r3, [pc, #92]	@ (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7c:	08db      	lsrs	r3, r3, #3
 8002b7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d01f      	beq.n	8002bce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b92:	4a11      	ldr	r2, [pc, #68]	@ (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b9a:	f7fe fae7 	bl	800116c <HAL_GetTick>
 8002b9e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ba0:	bf00      	nop
 8002ba2:	f7fe fae3 	bl	800116c <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d0f9      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bae:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <HAL_RCC_OscConfig+0x8b0>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bba:	00d2      	lsls	r2, r2, #3
 8002bbc:	4906      	ldr	r1, [pc, #24]	@ (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bc2:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	4a04      	ldr	r2, [pc, #16]	@ (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3730      	adds	r7, #48	@ 0x30
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	58024400 	.word	0x58024400
 8002bdc:	ffff0007 	.word	0xffff0007

08002be0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e19c      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf4:	4b8a      	ldr	r3, [pc, #552]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d910      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c02:	4b87      	ldr	r3, [pc, #540]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 020f 	bic.w	r2, r3, #15
 8002c0a:	4985      	ldr	r1, [pc, #532]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b83      	ldr	r3, [pc, #524]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e184      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d010      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	4b7b      	ldr	r3, [pc, #492]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d908      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c40:	4b78      	ldr	r3, [pc, #480]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	4975      	ldr	r1, [pc, #468]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d010      	beq.n	8002c80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	4b70      	ldr	r3, [pc, #448]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d908      	bls.n	8002c80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	496a      	ldr	r1, [pc, #424]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d010      	beq.n	8002cae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	4b64      	ldr	r3, [pc, #400]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d908      	bls.n	8002cae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c9c:	4b61      	ldr	r3, [pc, #388]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	495e      	ldr	r1, [pc, #376]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d010      	beq.n	8002cdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	4b59      	ldr	r3, [pc, #356]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d908      	bls.n	8002cdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cca:	4b56      	ldr	r3, [pc, #344]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4953      	ldr	r1, [pc, #332]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d010      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	4b4d      	ldr	r3, [pc, #308]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d908      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf8:	4b4a      	ldr	r3, [pc, #296]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f023 020f 	bic.w	r2, r3, #15
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4947      	ldr	r1, [pc, #284]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d055      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d16:	4b43      	ldr	r3, [pc, #268]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	4940      	ldr	r1, [pc, #256]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d30:	4b3c      	ldr	r3, [pc, #240]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d121      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0f6      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d48:	4b36      	ldr	r3, [pc, #216]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d115      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0ea      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d60:	4b30      	ldr	r3, [pc, #192]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d109      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0de      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d70:	4b2c      	ldr	r3, [pc, #176]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0d6      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d80:	4b28      	ldr	r3, [pc, #160]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f023 0207 	bic.w	r2, r3, #7
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4925      	ldr	r1, [pc, #148]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d92:	f7fe f9eb 	bl	800116c <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9a:	f7fe f9e7 	bl	800116c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0be      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d1eb      	bne.n	8002d9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d010      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	4b14      	ldr	r3, [pc, #80]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d208      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dde:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f023 020f 	bic.w	r2, r3, #15
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	490e      	ldr	r1, [pc, #56]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d214      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 020f 	bic.w	r2, r3, #15
 8002e06:	4906      	ldr	r1, [pc, #24]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e086      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
 8002e20:	52002000 	.word	0x52002000
 8002e24:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	4b3f      	ldr	r3, [pc, #252]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d208      	bcs.n	8002e56 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e44:	4b3c      	ldr	r3, [pc, #240]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	4939      	ldr	r1, [pc, #228]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d010      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	4b34      	ldr	r3, [pc, #208]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d208      	bcs.n	8002e84 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e72:	4b31      	ldr	r3, [pc, #196]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	492e      	ldr	r1, [pc, #184]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699a      	ldr	r2, [r3, #24]
 8002e94:	4b28      	ldr	r3, [pc, #160]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d208      	bcs.n	8002eb2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ea0:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	4922      	ldr	r1, [pc, #136]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d010      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d208      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ece:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	4917      	ldr	r1, [pc, #92]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ee0:	f000 f834 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b14      	ldr	r3, [pc, #80]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	4912      	ldr	r1, [pc, #72]	@ (8002f3c <HAL_RCC_ClockConfig+0x35c>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002efe:	4b0e      	ldr	r3, [pc, #56]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	4a0d      	ldr	r2, [pc, #52]	@ (8002f3c <HAL_RCC_ClockConfig+0x35c>)
 8002f08:	5cd3      	ldrb	r3, [r2, r3]
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
 8002f14:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <HAL_RCC_ClockConfig+0x360>)
 8002f16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f18:	4a0a      	ldr	r2, [pc, #40]	@ (8002f44 <HAL_RCC_ClockConfig+0x364>)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <HAL_RCC_ClockConfig+0x368>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe f8d8 	bl	80010d8 <HAL_InitTick>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	0800498c 	.word	0x0800498c
 8002f40:	24000004 	.word	0x24000004
 8002f44:	24000000 	.word	0x24000000
 8002f48:	24000008 	.word	0x24000008

08002f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	@ 0x24
 8002f50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f52:	4bb3      	ldr	r3, [pc, #716]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f5a:	2b18      	cmp	r3, #24
 8002f5c:	f200 8155 	bhi.w	800320a <HAL_RCC_GetSysClockFreq+0x2be>
 8002f60:	a201      	add	r2, pc, #4	@ (adr r2, 8002f68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002fcd 	.word	0x08002fcd
 8002f6c:	0800320b 	.word	0x0800320b
 8002f70:	0800320b 	.word	0x0800320b
 8002f74:	0800320b 	.word	0x0800320b
 8002f78:	0800320b 	.word	0x0800320b
 8002f7c:	0800320b 	.word	0x0800320b
 8002f80:	0800320b 	.word	0x0800320b
 8002f84:	0800320b 	.word	0x0800320b
 8002f88:	08002ff3 	.word	0x08002ff3
 8002f8c:	0800320b 	.word	0x0800320b
 8002f90:	0800320b 	.word	0x0800320b
 8002f94:	0800320b 	.word	0x0800320b
 8002f98:	0800320b 	.word	0x0800320b
 8002f9c:	0800320b 	.word	0x0800320b
 8002fa0:	0800320b 	.word	0x0800320b
 8002fa4:	0800320b 	.word	0x0800320b
 8002fa8:	08002ff9 	.word	0x08002ff9
 8002fac:	0800320b 	.word	0x0800320b
 8002fb0:	0800320b 	.word	0x0800320b
 8002fb4:	0800320b 	.word	0x0800320b
 8002fb8:	0800320b 	.word	0x0800320b
 8002fbc:	0800320b 	.word	0x0800320b
 8002fc0:	0800320b 	.word	0x0800320b
 8002fc4:	0800320b 	.word	0x0800320b
 8002fc8:	08002fff 	.word	0x08002fff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fcc:	4b94      	ldr	r3, [pc, #592]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d009      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fd8:	4b91      	ldr	r3, [pc, #580]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	08db      	lsrs	r3, r3, #3
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	4a90      	ldr	r2, [pc, #576]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fea:	e111      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fec:	4b8d      	ldr	r3, [pc, #564]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fee:	61bb      	str	r3, [r7, #24]
      break;
 8002ff0:	e10e      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002ff2:	4b8d      	ldr	r3, [pc, #564]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ff4:	61bb      	str	r3, [r7, #24]
      break;
 8002ff6:	e10b      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ff8:	4b8c      	ldr	r3, [pc, #560]	@ (800322c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ffa:	61bb      	str	r3, [r7, #24]
      break;
 8002ffc:	e108      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ffe:	4b88      	ldr	r3, [pc, #544]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003008:	4b85      	ldr	r3, [pc, #532]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003012:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003014:	4b82      	ldr	r3, [pc, #520]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800301e:	4b80      	ldr	r3, [pc, #512]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003022:	08db      	lsrs	r3, r3, #3
 8003024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003036:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80e1 	beq.w	8003204 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b02      	cmp	r3, #2
 8003046:	f000 8083 	beq.w	8003150 <HAL_RCC_GetSysClockFreq+0x204>
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b02      	cmp	r3, #2
 800304e:	f200 80a1 	bhi.w	8003194 <HAL_RCC_GetSysClockFreq+0x248>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x114>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d056      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x1c0>
 800305e:	e099      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003060:	4b6f      	ldr	r3, [pc, #444]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d02d      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800306c:	4b6c      	ldr	r3, [pc, #432]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	08db      	lsrs	r3, r3, #3
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	4a6b      	ldr	r2, [pc, #428]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
 800307c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	ee07 3a90 	vmov	s15, r3
 8003084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003096:	4b62      	ldr	r3, [pc, #392]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309e:	ee07 3a90 	vmov	s15, r3
 80030a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030c6:	e087      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003234 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030da:	4b51      	ldr	r3, [pc, #324]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003106:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800310a:	e065      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003116:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003238 <HAL_RCC_GetSysClockFreq+0x2ec>
 800311a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800311e:	4b40      	ldr	r3, [pc, #256]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003132:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800313a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800313e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800314e:	e043      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800323c <HAL_RCC_GetSysClockFreq+0x2f0>
 800315e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003162:	4b2f      	ldr	r3, [pc, #188]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003172:	ed97 6a02 	vldr	s12, [r7, #8]
 8003176:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 800317a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800317e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800318a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003192:	e021      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003238 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031d8:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031dc:	0a5b      	lsrs	r3, r3, #9
 80031de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031e2:	3301      	adds	r3, #1
 80031e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80031f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031fc:	ee17 3a90 	vmov	r3, s15
 8003200:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003202:	e005      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	61bb      	str	r3, [r7, #24]
      break;
 8003208:	e002      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800320a:	4b07      	ldr	r3, [pc, #28]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800320c:	61bb      	str	r3, [r7, #24]
      break;
 800320e:	bf00      	nop
  }

  return sysclockfreq;
 8003210:	69bb      	ldr	r3, [r7, #24]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	@ 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	58024400 	.word	0x58024400
 8003224:	03d09000 	.word	0x03d09000
 8003228:	003d0900 	.word	0x003d0900
 800322c:	01312d00 	.word	0x01312d00
 8003230:	46000000 	.word	0x46000000
 8003234:	4c742400 	.word	0x4c742400
 8003238:	4a742400 	.word	0x4a742400
 800323c:	4b989680 	.word	0x4b989680

08003240 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003244:	b0ca      	sub	sp, #296	@ 0x128
 8003246:	af00      	add	r7, sp, #0
 8003248:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003252:	2300      	movs	r3, #0
 8003254:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003260:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003264:	2500      	movs	r5, #0
 8003266:	ea54 0305 	orrs.w	r3, r4, r5
 800326a:	d049      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800326c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003272:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003276:	d02f      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003278:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800327c:	d828      	bhi.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800327e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003282:	d01a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003284:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003288:	d822      	bhi.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800328e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003292:	d007      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003294:	e01c      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003296:	4bb8      	ldr	r3, [pc, #736]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	4ab7      	ldr	r2, [pc, #732]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800329c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032a2:	e01a      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a8:	3308      	adds	r3, #8
 80032aa:	2102      	movs	r1, #2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 f9d1 	bl	8004654 <RCCEx_PLL2_Config>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032b8:	e00f      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032be:	3328      	adds	r3, #40	@ 0x28
 80032c0:	2102      	movs	r1, #2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 fa78 	bl	80047b8 <RCCEx_PLL3_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032ce:	e004      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032d6:	e000      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80032d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032e2:	4ba5      	ldr	r3, [pc, #660]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032f0:	4aa1      	ldr	r2, [pc, #644]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032f2:	430b      	orrs	r3, r1
 80032f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80032f6:	e003      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800330c:	f04f 0900 	mov.w	r9, #0
 8003310:	ea58 0309 	orrs.w	r3, r8, r9
 8003314:	d047      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	2b04      	cmp	r3, #4
 800331e:	d82a      	bhi.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003320:	a201      	add	r2, pc, #4	@ (adr r2, 8003328 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003326:	bf00      	nop
 8003328:	0800333d 	.word	0x0800333d
 800332c:	0800334b 	.word	0x0800334b
 8003330:	08003361 	.word	0x08003361
 8003334:	0800337f 	.word	0x0800337f
 8003338:	0800337f 	.word	0x0800337f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800333c:	4b8e      	ldr	r3, [pc, #568]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800333e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003340:	4a8d      	ldr	r2, [pc, #564]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003346:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003348:	e01a      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800334a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334e:	3308      	adds	r3, #8
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f001 f97e 	bl	8004654 <RCCEx_PLL2_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800335e:	e00f      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003364:	3328      	adds	r3, #40	@ 0x28
 8003366:	2100      	movs	r1, #0
 8003368:	4618      	mov	r0, r3
 800336a:	f001 fa25 	bl	80047b8 <RCCEx_PLL3_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003374:	e004      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800337c:	e000      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800337e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003388:	4b7b      	ldr	r3, [pc, #492]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800338a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338c:	f023 0107 	bic.w	r1, r3, #7
 8003390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003396:	4a78      	ldr	r2, [pc, #480]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003398:	430b      	orrs	r3, r1
 800339a:	6513      	str	r3, [r2, #80]	@ 0x50
 800339c:	e003      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80033a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80033b2:	f04f 0b00 	mov.w	fp, #0
 80033b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80033ba:	d04c      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033c6:	d030      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80033c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033cc:	d829      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80033d0:	d02d      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80033d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80033d4:	d825      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033d6:	2b80      	cmp	r3, #128	@ 0x80
 80033d8:	d018      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033da:	2b80      	cmp	r3, #128	@ 0x80
 80033dc:	d821      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80033e2:	2b40      	cmp	r3, #64	@ 0x40
 80033e4:	d007      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80033e6:	e01c      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e8:	4b63      	ldr	r3, [pc, #396]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	4a62      	ldr	r2, [pc, #392]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033f4:	e01c      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fa:	3308      	adds	r3, #8
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 f928 	bl	8004654 <RCCEx_PLL2_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800340a:	e011      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800340c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003410:	3328      	adds	r3, #40	@ 0x28
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f001 f9cf 	bl	80047b8 <RCCEx_PLL3_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003420:	e006      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003428:	e002      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800342a:	bf00      	nop
 800342c:	e000      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800342e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10a      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003438:	4b4f      	ldr	r3, [pc, #316]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800343a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800343c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003446:	4a4c      	ldr	r2, [pc, #304]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003448:	430b      	orrs	r3, r1
 800344a:	6513      	str	r3, [r2, #80]	@ 0x50
 800344c:	e003      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003462:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003466:	2300      	movs	r3, #0
 8003468:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800346c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003470:	460b      	mov	r3, r1
 8003472:	4313      	orrs	r3, r2
 8003474:	d053      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800347e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003482:	d035      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003484:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003488:	d82e      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800348a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800348e:	d031      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003490:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003494:	d828      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003496:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800349a:	d01a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800349c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034a0:	d822      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80034a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034aa:	d007      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80034ac:	e01c      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ae:	4b32      	ldr	r3, [pc, #200]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b2:	4a31      	ldr	r2, [pc, #196]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034ba:	e01c      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c0:	3308      	adds	r3, #8
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f001 f8c5 	bl	8004654 <RCCEx_PLL2_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034d0:	e011      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d6:	3328      	adds	r3, #40	@ 0x28
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 f96c 	bl	80047b8 <RCCEx_PLL3_Config>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034e6:	e006      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ee:	e002      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034f0:	bf00      	nop
 80034f2:	e000      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10b      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003502:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800350e:	4a1a      	ldr	r2, [pc, #104]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003510:	430b      	orrs	r3, r1
 8003512:	6593      	str	r3, [r2, #88]	@ 0x58
 8003514:	e003      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800351a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800351e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800352a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003534:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003538:	460b      	mov	r3, r1
 800353a:	4313      	orrs	r3, r2
 800353c:	d056      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003542:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003546:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800354a:	d038      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800354c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003550:	d831      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003552:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003556:	d034      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003558:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800355c:	d82b      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800355e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003562:	d01d      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003564:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003568:	d825      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800356e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003574:	e01f      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003576:	bf00      	nop
 8003578:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800357c:	4ba2      	ldr	r3, [pc, #648]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800357e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003580:	4aa1      	ldr	r2, [pc, #644]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003588:	e01c      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358e:	3308      	adds	r3, #8
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f001 f85e 	bl	8004654 <RCCEx_PLL2_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800359e:	e011      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a4:	3328      	adds	r3, #40	@ 0x28
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 f905 	bl	80047b8 <RCCEx_PLL3_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035b4:	e006      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035bc:	e002      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80035c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80035cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035dc:	4a8a      	ldr	r2, [pc, #552]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035de:	430b      	orrs	r3, r1
 80035e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80035e2:	e003      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035fc:	2300      	movs	r3, #0
 80035fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003602:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003606:	460b      	mov	r3, r1
 8003608:	4313      	orrs	r3, r2
 800360a:	d03a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003612:	2b30      	cmp	r3, #48	@ 0x30
 8003614:	d01f      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003616:	2b30      	cmp	r3, #48	@ 0x30
 8003618:	d819      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800361a:	2b20      	cmp	r3, #32
 800361c:	d00c      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800361e:	2b20      	cmp	r3, #32
 8003620:	d815      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d019      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003626:	2b10      	cmp	r3, #16
 8003628:	d111      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362a:	4b77      	ldr	r3, [pc, #476]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800362c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362e:	4a76      	ldr	r2, [pc, #472]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003634:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003636:	e011      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363c:	3308      	adds	r3, #8
 800363e:	2102      	movs	r1, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f001 f807 	bl	8004654 <RCCEx_PLL2_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800364c:	e006      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003654:	e002      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800365a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003664:	4b68      	ldr	r3, [pc, #416]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003668:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800366c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003672:	4a65      	ldr	r2, [pc, #404]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003674:	430b      	orrs	r3, r1
 8003676:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003678:	e003      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800367e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800368e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003692:	2300      	movs	r3, #0
 8003694:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003698:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800369c:	460b      	mov	r3, r1
 800369e:	4313      	orrs	r3, r2
 80036a0:	d051      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80036a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036ac:	d035      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80036ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036b2:	d82e      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036b8:	d031      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80036ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036be:	d828      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c4:	d01a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80036c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ca:	d822      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80036d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d4:	d007      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80036d6:	e01c      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036e4:	e01c      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ea:	3308      	adds	r3, #8
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 ffb0 	bl	8004654 <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036fa:	e011      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003700:	3328      	adds	r3, #40	@ 0x28
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f001 f857 	bl	80047b8 <RCCEx_PLL3_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003710:	e006      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003718:	e002      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800371a:	bf00      	nop
 800371c:	e000      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800371e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003728:	4b37      	ldr	r3, [pc, #220]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800372a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003736:	4a34      	ldr	r2, [pc, #208]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003738:	430b      	orrs	r3, r1
 800373a:	6513      	str	r3, [r2, #80]	@ 0x50
 800373c:	e003      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003752:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003756:	2300      	movs	r3, #0
 8003758:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800375c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003760:	460b      	mov	r3, r1
 8003762:	4313      	orrs	r3, r2
 8003764:	d056      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800376c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003770:	d033      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003772:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003776:	d82c      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003778:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800377c:	d02f      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800377e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003782:	d826      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003784:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003788:	d02b      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800378a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800378e:	d820      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003790:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003794:	d012      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003796:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800379a:	d81a      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d022      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037a4:	d115      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	3308      	adds	r3, #8
 80037ac:	2101      	movs	r1, #1
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 ff50 	bl	8004654 <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037ba:	e015      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c0:	3328      	adds	r3, #40	@ 0x28
 80037c2:	2101      	movs	r1, #1
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fff7 	bl	80047b8 <RCCEx_PLL3_Config>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037d0:	e00a      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037d8:	e006      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037da:	bf00      	nop
 80037dc:	e004      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037de:	bf00      	nop
 80037e0:	e002      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037e2:	bf00      	nop
 80037e4:	e000      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10d      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037f0:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037fe:	4a02      	ldr	r2, [pc, #8]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003800:	430b      	orrs	r3, r1
 8003802:	6513      	str	r3, [r2, #80]	@ 0x50
 8003804:	e006      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003806:	bf00      	nop
 8003808:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003810:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003820:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800382a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800382e:	460b      	mov	r3, r1
 8003830:	4313      	orrs	r3, r2
 8003832:	d055      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800383c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003840:	d033      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003846:	d82c      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800384c:	d02f      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800384e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003852:	d826      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003854:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003858:	d02b      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800385a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800385e:	d820      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003864:	d012      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800386a:	d81a      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d022      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003874:	d115      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387a:	3308      	adds	r3, #8
 800387c:	2101      	movs	r1, #1
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fee8 	bl	8004654 <RCCEx_PLL2_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800388a:	e015      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	3328      	adds	r3, #40	@ 0x28
 8003892:	2101      	movs	r1, #1
 8003894:	4618      	mov	r0, r3
 8003896:	f000 ff8f 	bl	80047b8 <RCCEx_PLL3_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038a0:	e00a      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038a8:	e006      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038aa:	bf00      	nop
 80038ac:	e004      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038ae:	bf00      	nop
 80038b0:	e002      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038b2:	bf00      	nop
 80038b4:	e000      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10b      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038c0:	4ba3      	ldr	r3, [pc, #652]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80038c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038d0:	4a9f      	ldr	r2, [pc, #636]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d2:	430b      	orrs	r3, r1
 80038d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d6:	e003      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038fa:	460b      	mov	r3, r1
 80038fc:	4313      	orrs	r3, r2
 80038fe:	d037      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800390a:	d00e      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800390c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003910:	d816      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d018      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003916:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800391a:	d111      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391c:	4b8c      	ldr	r3, [pc, #560]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	4a8b      	ldr	r2, [pc, #556]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003928:	e00f      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	3308      	adds	r3, #8
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fe8e 	bl	8004654 <RCCEx_PLL2_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800393e:	e004      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003952:	4b7f      	ldr	r3, [pc, #508]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003956:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003960:	4a7b      	ldr	r2, [pc, #492]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003962:	430b      	orrs	r3, r1
 8003964:	6513      	str	r3, [r2, #80]	@ 0x50
 8003966:	e003      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800396c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800397c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003980:	2300      	movs	r3, #0
 8003982:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003986:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800398a:	460b      	mov	r3, r1
 800398c:	4313      	orrs	r3, r2
 800398e:	d039      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003996:	2b03      	cmp	r3, #3
 8003998:	d81c      	bhi.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800399a:	a201      	add	r2, pc, #4	@ (adr r2, 80039a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039dd 	.word	0x080039dd
 80039a4:	080039b1 	.word	0x080039b1
 80039a8:	080039bf 	.word	0x080039bf
 80039ac:	080039dd 	.word	0x080039dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b0:	4b67      	ldr	r3, [pc, #412]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b4:	4a66      	ldr	r2, [pc, #408]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039bc:	e00f      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c2:	3308      	adds	r3, #8
 80039c4:	2102      	movs	r1, #2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fe44 	bl	8004654 <RCCEx_PLL2_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039d2:	e004      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80039dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ea:	f023 0103 	bic.w	r1, r3, #3
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039f4:	4a56      	ldr	r2, [pc, #344]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039fa:	e003      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f000 809f 	beq.w	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a26:	4b4b      	ldr	r3, [pc, #300]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a4a      	ldr	r2, [pc, #296]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a32:	f7fd fb9b 	bl	800116c <HAL_GetTick>
 8003a36:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a3a:	e00b      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3c:	f7fd fb96 	bl	800116c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b64      	cmp	r3, #100	@ 0x64
 8003a4a:	d903      	bls.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a52:	e005      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a54:	4b3f      	ldr	r3, [pc, #252]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0ed      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d179      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a68:	4b39      	ldr	r3, [pc, #228]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a74:	4053      	eors	r3, r2
 8003a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d015      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a7e:	4b34      	ldr	r3, [pc, #208]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a8a:	4b31      	ldr	r3, [pc, #196]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8e:	4a30      	ldr	r2, [pc, #192]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a94:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a96:	4b2e      	ldr	r3, [pc, #184]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003aa2:	4a2b      	ldr	r2, [pc, #172]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aa8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ab6:	d118      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fb58 	bl	800116c <HAL_GetTick>
 8003abc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ac0:	e00d      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac2:	f7fd fb53 	bl	800116c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003acc:	1ad2      	subs	r2, r2, r3
 8003ace:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d903      	bls.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003adc:	e005      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ade:	4b1c      	ldr	r3, [pc, #112]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0eb      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d129      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003afe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b02:	d10e      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b04:	4b12      	ldr	r3, [pc, #72]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b14:	091a      	lsrs	r2, r3, #4
 8003b16:	4b10      	ldr	r3, [pc, #64]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6113      	str	r3, [r2, #16]
 8003b20:	e005      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b22:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	4a0a      	ldr	r2, [pc, #40]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b2c:	6113      	str	r3, [r2, #16]
 8003b2e:	4b08      	ldr	r3, [pc, #32]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b30:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3e:	4a04      	ldr	r2, [pc, #16]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b44:	e00e      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003b4e:	e009      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b50:	58024400 	.word	0x58024400
 8003b54:	58024800 	.word	0x58024800
 8003b58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f002 0301 	and.w	r3, r2, #1
 8003b70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f000 8089 	beq.w	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b8c:	2b28      	cmp	r3, #40	@ 0x28
 8003b8e:	d86b      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b90:	a201      	add	r2, pc, #4	@ (adr r2, 8003b98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003c71 	.word	0x08003c71
 8003b9c:	08003c69 	.word	0x08003c69
 8003ba0:	08003c69 	.word	0x08003c69
 8003ba4:	08003c69 	.word	0x08003c69
 8003ba8:	08003c69 	.word	0x08003c69
 8003bac:	08003c69 	.word	0x08003c69
 8003bb0:	08003c69 	.word	0x08003c69
 8003bb4:	08003c69 	.word	0x08003c69
 8003bb8:	08003c3d 	.word	0x08003c3d
 8003bbc:	08003c69 	.word	0x08003c69
 8003bc0:	08003c69 	.word	0x08003c69
 8003bc4:	08003c69 	.word	0x08003c69
 8003bc8:	08003c69 	.word	0x08003c69
 8003bcc:	08003c69 	.word	0x08003c69
 8003bd0:	08003c69 	.word	0x08003c69
 8003bd4:	08003c69 	.word	0x08003c69
 8003bd8:	08003c53 	.word	0x08003c53
 8003bdc:	08003c69 	.word	0x08003c69
 8003be0:	08003c69 	.word	0x08003c69
 8003be4:	08003c69 	.word	0x08003c69
 8003be8:	08003c69 	.word	0x08003c69
 8003bec:	08003c69 	.word	0x08003c69
 8003bf0:	08003c69 	.word	0x08003c69
 8003bf4:	08003c69 	.word	0x08003c69
 8003bf8:	08003c71 	.word	0x08003c71
 8003bfc:	08003c69 	.word	0x08003c69
 8003c00:	08003c69 	.word	0x08003c69
 8003c04:	08003c69 	.word	0x08003c69
 8003c08:	08003c69 	.word	0x08003c69
 8003c0c:	08003c69 	.word	0x08003c69
 8003c10:	08003c69 	.word	0x08003c69
 8003c14:	08003c69 	.word	0x08003c69
 8003c18:	08003c71 	.word	0x08003c71
 8003c1c:	08003c69 	.word	0x08003c69
 8003c20:	08003c69 	.word	0x08003c69
 8003c24:	08003c69 	.word	0x08003c69
 8003c28:	08003c69 	.word	0x08003c69
 8003c2c:	08003c69 	.word	0x08003c69
 8003c30:	08003c69 	.word	0x08003c69
 8003c34:	08003c69 	.word	0x08003c69
 8003c38:	08003c71 	.word	0x08003c71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c40:	3308      	adds	r3, #8
 8003c42:	2101      	movs	r1, #1
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fd05 	bl	8004654 <RCCEx_PLL2_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c50:	e00f      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c56:	3328      	adds	r3, #40	@ 0x28
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fdac 	bl	80047b8 <RCCEx_PLL3_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c66:	e004      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c6e:	e000      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c7a:	4bbf      	ldr	r3, [pc, #764]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c7e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c88:	4abb      	ldr	r2, [pc, #748]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c8e:	e003      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	f002 0302 	and.w	r3, r2, #2
 8003ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003cae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	d041      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cbe:	2b05      	cmp	r3, #5
 8003cc0:	d824      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003d15 	.word	0x08003d15
 8003ccc:	08003ce1 	.word	0x08003ce1
 8003cd0:	08003cf7 	.word	0x08003cf7
 8003cd4:	08003d15 	.word	0x08003d15
 8003cd8:	08003d15 	.word	0x08003d15
 8003cdc:	08003d15 	.word	0x08003d15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fcb3 	bl	8004654 <RCCEx_PLL2_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cf4:	e00f      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfa:	3328      	adds	r3, #40	@ 0x28
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fd5a 	bl	80047b8 <RCCEx_PLL3_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d0a:	e004      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d12:	e000      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10a      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d1e:	4b96      	ldr	r3, [pc, #600]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d22:	f023 0107 	bic.w	r1, r3, #7
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d2c:	4a92      	ldr	r2, [pc, #584]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d32:	e003      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	f002 0304 	and.w	r3, r2, #4
 8003d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	d044      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	d825      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003d68:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003dbd 	.word	0x08003dbd
 8003d74:	08003d89 	.word	0x08003d89
 8003d78:	08003d9f 	.word	0x08003d9f
 8003d7c:	08003dbd 	.word	0x08003dbd
 8003d80:	08003dbd 	.word	0x08003dbd
 8003d84:	08003dbd 	.word	0x08003dbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8c:	3308      	adds	r3, #8
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fc5f 	bl	8004654 <RCCEx_PLL2_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d9c:	e00f      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da2:	3328      	adds	r3, #40	@ 0x28
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fd06 	bl	80047b8 <RCCEx_PLL3_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003db2:	e004      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dba:	e000      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dc6:	4b6c      	ldr	r3, [pc, #432]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dca:	f023 0107 	bic.w	r1, r3, #7
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dd6:	4a68      	ldr	r2, [pc, #416]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ddc:	e003      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f002 0320 	and.w	r3, r2, #32
 8003df2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003df6:	2300      	movs	r3, #0
 8003df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e00:	460b      	mov	r3, r1
 8003e02:	4313      	orrs	r3, r2
 8003e04:	d055      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e12:	d033      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e18:	d82c      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e1e:	d02f      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e24:	d826      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e2a:	d02b      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003e2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e30:	d820      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e36:	d012      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e3c:	d81a      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d022      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e46:	d115      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fbff 	bl	8004654 <RCCEx_PLL2_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e5c:	e015      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e62:	3328      	adds	r3, #40	@ 0x28
 8003e64:	2102      	movs	r1, #2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fca6 	bl	80047b8 <RCCEx_PLL3_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e72:	e00a      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e7a:	e006      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e7c:	bf00      	nop
 8003e7e:	e004      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e80:	bf00      	nop
 8003e82:	e002      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e84:	bf00      	nop
 8003e86:	e000      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e92:	4b39      	ldr	r3, [pc, #228]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea2:	4a35      	ldr	r2, [pc, #212]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ea8:	e003      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ec8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	d058      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003eda:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ede:	d033      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ee0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ee4:	d82c      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eea:	d02f      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef0:	d826      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ef2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ef6:	d02b      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ef8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003efc:	d820      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003efe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f02:	d012      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f08:	d81a      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d022      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f12:	d115      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f18:	3308      	adds	r3, #8
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fb99 	bl	8004654 <RCCEx_PLL2_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f28:	e015      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2e:	3328      	adds	r3, #40	@ 0x28
 8003f30:	2102      	movs	r1, #2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fc40 	bl	80047b8 <RCCEx_PLL3_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f46:	e006      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f48:	bf00      	nop
 8003f4a:	e004      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f4c:	bf00      	nop
 8003f4e:	e002      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f50:	bf00      	nop
 8003f52:	e000      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10e      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f5e:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f62:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f6e:	4a02      	ldr	r2, [pc, #8]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f74:	e006      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f76:	bf00      	nop
 8003f78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	d055      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fb0:	d033      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003fb2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fb6:	d82c      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fbc:	d02f      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fc2:	d826      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fc4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fc8:	d02b      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003fca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fce:	d820      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fd4:	d012      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003fd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fda:	d81a      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d022      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fe4:	d115      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fea:	3308      	adds	r3, #8
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fb30 	bl	8004654 <RCCEx_PLL2_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ffa:	e015      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004000:	3328      	adds	r3, #40	@ 0x28
 8004002:	2102      	movs	r1, #2
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fbd7 	bl	80047b8 <RCCEx_PLL3_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004010:	e00a      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004018:	e006      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800401a:	bf00      	nop
 800401c:	e004      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004030:	4ba1      	ldr	r3, [pc, #644]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004034:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004040:	4a9d      	ldr	r2, [pc, #628]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004042:	430b      	orrs	r3, r1
 8004044:	6593      	str	r3, [r2, #88]	@ 0x58
 8004046:	e003      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	f002 0308 	and.w	r3, r2, #8
 800405c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004060:	2300      	movs	r3, #0
 8004062:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004066:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800406a:	460b      	mov	r3, r1
 800406c:	4313      	orrs	r3, r2
 800406e:	d01e      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800407c:	d10c      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004082:	3328      	adds	r3, #40	@ 0x28
 8004084:	2102      	movs	r1, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fb96 	bl	80047b8 <RCCEx_PLL3_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004098:	4b87      	ldr	r3, [pc, #540]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800409a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a8:	4a83      	ldr	r2, [pc, #524]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040aa:	430b      	orrs	r3, r1
 80040ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f002 0310 	and.w	r3, r2, #16
 80040ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040be:	2300      	movs	r3, #0
 80040c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80040c8:	460b      	mov	r3, r1
 80040ca:	4313      	orrs	r3, r2
 80040cc:	d01e      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80040ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040da:	d10c      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e0:	3328      	adds	r3, #40	@ 0x28
 80040e2:	2102      	movs	r1, #2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fb67 	bl	80047b8 <RCCEx_PLL3_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040f6:	4b70      	ldr	r3, [pc, #448]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004102:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004106:	4a6c      	ldr	r2, [pc, #432]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004108:	430b      	orrs	r3, r1
 800410a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004118:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800411c:	2300      	movs	r3, #0
 800411e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004122:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004126:	460b      	mov	r3, r1
 8004128:	4313      	orrs	r3, r2
 800412a:	d03e      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004138:	d022      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800413a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800413e:	d81b      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004148:	d00b      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800414a:	e015      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004150:	3308      	adds	r3, #8
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fa7d 	bl	8004654 <RCCEx_PLL2_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004160:	e00f      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004166:	3328      	adds	r3, #40	@ 0x28
 8004168:	2102      	movs	r1, #2
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fb24 	bl	80047b8 <RCCEx_PLL3_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004176:	e004      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800417e:	e000      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800418a:	4b4b      	ldr	r3, [pc, #300]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800418c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004196:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800419a:	4a47      	ldr	r2, [pc, #284]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800419c:	430b      	orrs	r3, r1
 800419e:	6593      	str	r3, [r2, #88]	@ 0x58
 80041a0:	e003      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80041b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041b8:	2300      	movs	r3, #0
 80041ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041c0:	460b      	mov	r3, r1
 80041c2:	4313      	orrs	r3, r2
 80041c4:	d03b      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041d2:	d01f      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80041d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041d8:	d818      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80041da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041de:	d003      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80041e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041e4:	d007      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80041e6:	e011      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e8:	4b33      	ldr	r3, [pc, #204]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	4a32      	ldr	r2, [pc, #200]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041f4:	e00f      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fa:	3328      	adds	r3, #40	@ 0x28
 80041fc:	2101      	movs	r1, #1
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fada 	bl	80047b8 <RCCEx_PLL3_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800420a:	e004      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800421e:	4b26      	ldr	r3, [pc, #152]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004222:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422e:	4a22      	ldr	r2, [pc, #136]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004230:	430b      	orrs	r3, r1
 8004232:	6553      	str	r3, [r2, #84]	@ 0x54
 8004234:	e003      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800423a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800424a:	673b      	str	r3, [r7, #112]	@ 0x70
 800424c:	2300      	movs	r3, #0
 800424e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004250:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004254:	460b      	mov	r3, r1
 8004256:	4313      	orrs	r3, r2
 8004258:	d034      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800425a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004268:	d007      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800426a:	e011      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800426c:	4b12      	ldr	r3, [pc, #72]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	4a11      	ldr	r2, [pc, #68]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004278:	e00e      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800427a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427e:	3308      	adds	r3, #8
 8004280:	2102      	movs	r1, #2
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f9e6 	bl	8004654 <RCCEx_PLL2_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800428e:	e003      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10d      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042a0:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ae:	4a02      	ldr	r2, [pc, #8]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042b0:	430b      	orrs	r3, r1
 80042b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042b4:	e006      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80042b6:	bf00      	nop
 80042b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80042d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042d2:	2300      	movs	r3, #0
 80042d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042da:	460b      	mov	r3, r1
 80042dc:	4313      	orrs	r3, r2
 80042de:	d00c      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e4:	3328      	adds	r3, #40	@ 0x28
 80042e6:	2102      	movs	r1, #2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fa65 	bl	80047b8 <RCCEx_PLL3_Config>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004306:	663b      	str	r3, [r7, #96]	@ 0x60
 8004308:	2300      	movs	r3, #0
 800430a:	667b      	str	r3, [r7, #100]	@ 0x64
 800430c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004310:	460b      	mov	r3, r1
 8004312:	4313      	orrs	r3, r2
 8004314:	d038      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800431e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004322:	d018      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004328:	d811      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800432a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800432e:	d014      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004334:	d80b      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d011      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800433a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800433e:	d106      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004340:	4bc3      	ldr	r3, [pc, #780]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	4ac2      	ldr	r2, [pc, #776]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800434a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800434c:	e008      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004354:	e004      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004356:	bf00      	nop
 8004358:	e002      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800435a:	bf00      	nop
 800435c:	e000      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800435e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004368:	4bb9      	ldr	r3, [pc, #740]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800436a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004378:	4ab5      	ldr	r2, [pc, #724]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800437a:	430b      	orrs	r3, r1
 800437c:	6553      	str	r3, [r2, #84]	@ 0x54
 800437e:	e003      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004384:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004394:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004396:	2300      	movs	r3, #0
 8004398:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800439a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800439e:	460b      	mov	r3, r1
 80043a0:	4313      	orrs	r3, r2
 80043a2:	d009      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043a4:	4baa      	ldr	r3, [pc, #680]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b2:	4aa7      	ldr	r2, [pc, #668]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80043c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80043c6:	2300      	movs	r3, #0
 80043c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80043ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80043ce:	460b      	mov	r3, r1
 80043d0:	4313      	orrs	r3, r2
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043d4:	4b9e      	ldr	r3, [pc, #632]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80043e4:	4a9a      	ldr	r2, [pc, #616]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043e6:	430b      	orrs	r3, r1
 80043e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043f8:	2300      	movs	r3, #0
 80043fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004400:	460b      	mov	r3, r1
 8004402:	4313      	orrs	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004406:	4b92      	ldr	r3, [pc, #584]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004414:	4a8e      	ldr	r2, [pc, #568]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004416:	430b      	orrs	r3, r1
 8004418:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004426:	643b      	str	r3, [r7, #64]	@ 0x40
 8004428:	2300      	movs	r3, #0
 800442a:	647b      	str	r3, [r7, #68]	@ 0x44
 800442c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004430:	460b      	mov	r3, r1
 8004432:	4313      	orrs	r3, r2
 8004434:	d00e      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004436:	4b86      	ldr	r3, [pc, #536]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	4a85      	ldr	r2, [pc, #532]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800443c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004440:	6113      	str	r3, [r2, #16]
 8004442:	4b83      	ldr	r3, [pc, #524]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004444:	6919      	ldr	r1, [r3, #16]
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800444e:	4a80      	ldr	r2, [pc, #512]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004450:	430b      	orrs	r3, r1
 8004452:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004460:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004462:	2300      	movs	r3, #0
 8004464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004466:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800446a:	460b      	mov	r3, r1
 800446c:	4313      	orrs	r3, r2
 800446e:	d009      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004470:	4b77      	ldr	r3, [pc, #476]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004474:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447e:	4a74      	ldr	r2, [pc, #464]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004480:	430b      	orrs	r3, r1
 8004482:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004490:	633b      	str	r3, [r7, #48]	@ 0x30
 8004492:	2300      	movs	r3, #0
 8004494:	637b      	str	r3, [r7, #52]	@ 0x34
 8004496:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80044a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044b0:	4a67      	ldr	r2, [pc, #412]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b2:	430b      	orrs	r3, r1
 80044b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	2100      	movs	r1, #0
 80044c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80044cc:	460b      	mov	r3, r1
 80044ce:	4313      	orrs	r3, r2
 80044d0:	d011      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d6:	3308      	adds	r3, #8
 80044d8:	2100      	movs	r1, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 f8ba 	bl	8004654 <RCCEx_PLL2_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	2100      	movs	r1, #0
 8004500:	6239      	str	r1, [r7, #32]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
 8004508:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800450c:	460b      	mov	r3, r1
 800450e:	4313      	orrs	r3, r2
 8004510:	d011      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004516:	3308      	adds	r3, #8
 8004518:	2101      	movs	r1, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f000 f89a 	bl	8004654 <RCCEx_PLL2_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	2100      	movs	r1, #0
 8004540:	61b9      	str	r1, [r7, #24]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800454c:	460b      	mov	r3, r1
 800454e:	4313      	orrs	r3, r2
 8004550:	d011      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004556:	3308      	adds	r3, #8
 8004558:	2102      	movs	r1, #2
 800455a:	4618      	mov	r0, r3
 800455c:	f000 f87a 	bl	8004654 <RCCEx_PLL2_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	2100      	movs	r1, #0
 8004580:	6139      	str	r1, [r7, #16]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800458c:	460b      	mov	r3, r1
 800458e:	4313      	orrs	r3, r2
 8004590:	d011      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	3328      	adds	r3, #40	@ 0x28
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f90c 	bl	80047b8 <RCCEx_PLL3_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80045a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80045b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	2100      	movs	r1, #0
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045cc:	460b      	mov	r3, r1
 80045ce:	4313      	orrs	r3, r2
 80045d0:	d011      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	3328      	adds	r3, #40	@ 0x28
 80045d8:	2101      	movs	r1, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f8ec 	bl	80047b8 <RCCEx_PLL3_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	2100      	movs	r1, #0
 8004600:	6039      	str	r1, [r7, #0]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	e9d7 1200 	ldrd	r1, r2, [r7]
 800460c:	460b      	mov	r3, r1
 800460e:	4313      	orrs	r3, r2
 8004610:	d011      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004616:	3328      	adds	r3, #40	@ 0x28
 8004618:	2102      	movs	r1, #2
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f8cc 	bl	80047b8 <RCCEx_PLL3_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004636:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
}
 8004644:	4618      	mov	r0, r3
 8004646:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800464a:	46bd      	mov	sp, r7
 800464c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004650:	58024400 	.word	0x58024400

08004654 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004662:	4b53      	ldr	r3, [pc, #332]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	2b03      	cmp	r3, #3
 800466c:	d101      	bne.n	8004672 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e099      	b.n	80047a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004672:	4b4f      	ldr	r3, [pc, #316]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a4e      	ldr	r2, [pc, #312]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004678:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800467c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800467e:	f7fc fd75 	bl	800116c <HAL_GetTick>
 8004682:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004684:	e008      	b.n	8004698 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004686:	f7fc fd71 	bl	800116c <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e086      	b.n	80047a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004698:	4b45      	ldr	r3, [pc, #276]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1f0      	bne.n	8004686 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80046a4:	4b42      	ldr	r3, [pc, #264]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 80046a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	031b      	lsls	r3, r3, #12
 80046b2:	493f      	ldr	r1, [pc, #252]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	3b01      	subs	r3, #1
 80046be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	025b      	lsls	r3, r3, #9
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	041b      	lsls	r3, r3, #16
 80046d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	061b      	lsls	r3, r3, #24
 80046e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80046e8:	4931      	ldr	r1, [pc, #196]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046ee:	4b30      	ldr	r3, [pc, #192]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 80046f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	492d      	ldr	r1, [pc, #180]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004700:	4b2b      	ldr	r3, [pc, #172]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004704:	f023 0220 	bic.w	r2, r3, #32
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	4928      	ldr	r1, [pc, #160]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800470e:	4313      	orrs	r3, r2
 8004710:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004712:	4b27      	ldr	r3, [pc, #156]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004716:	4a26      	ldr	r2, [pc, #152]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004718:	f023 0310 	bic.w	r3, r3, #16
 800471c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800471e:	4b24      	ldr	r3, [pc, #144]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004720:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004722:	4b24      	ldr	r3, [pc, #144]	@ (80047b4 <RCCEx_PLL2_Config+0x160>)
 8004724:	4013      	ands	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	69d2      	ldr	r2, [r2, #28]
 800472a:	00d2      	lsls	r2, r2, #3
 800472c:	4920      	ldr	r1, [pc, #128]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004732:	4b1f      	ldr	r3, [pc, #124]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004736:	4a1e      	ldr	r2, [pc, #120]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004738:	f043 0310 	orr.w	r3, r3, #16
 800473c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d106      	bne.n	8004752 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004744:	4b1a      	ldr	r3, [pc, #104]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004748:	4a19      	ldr	r2, [pc, #100]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800474a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800474e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004750:	e00f      	b.n	8004772 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d106      	bne.n	8004766 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004758:	4b15      	ldr	r3, [pc, #84]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800475a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475c:	4a14      	ldr	r2, [pc, #80]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800475e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004762:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004764:	e005      	b.n	8004772 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004766:	4b12      	ldr	r3, [pc, #72]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476a:	4a11      	ldr	r2, [pc, #68]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800476c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004770:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004772:	4b0f      	ldr	r3, [pc, #60]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a0e      	ldr	r2, [pc, #56]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004778:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800477c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800477e:	f7fc fcf5 	bl	800116c <HAL_GetTick>
 8004782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004784:	e008      	b.n	8004798 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004786:	f7fc fcf1 	bl	800116c <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e006      	b.n	80047a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004798:	4b05      	ldr	r3, [pc, #20]	@ (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	58024400 	.word	0x58024400
 80047b4:	ffff0007 	.word	0xffff0007

080047b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047c6:	4b53      	ldr	r3, [pc, #332]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 80047c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d101      	bne.n	80047d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e099      	b.n	800490a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80047d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a4e      	ldr	r2, [pc, #312]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 80047dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e2:	f7fc fcc3 	bl	800116c <HAL_GetTick>
 80047e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047e8:	e008      	b.n	80047fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047ea:	f7fc fcbf 	bl	800116c <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e086      	b.n	800490a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047fc:	4b45      	ldr	r3, [pc, #276]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f0      	bne.n	80047ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004808:	4b42      	ldr	r3, [pc, #264]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	051b      	lsls	r3, r3, #20
 8004816:	493f      	ldr	r1, [pc, #252]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004818:	4313      	orrs	r3, r2
 800481a:	628b      	str	r3, [r1, #40]	@ 0x28
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	3b01      	subs	r3, #1
 8004822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	3b01      	subs	r3, #1
 800482c:	025b      	lsls	r3, r3, #9
 800482e:	b29b      	uxth	r3, r3
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	3b01      	subs	r3, #1
 8004838:	041b      	lsls	r3, r3, #16
 800483a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	3b01      	subs	r3, #1
 8004846:	061b      	lsls	r3, r3, #24
 8004848:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800484c:	4931      	ldr	r1, [pc, #196]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004852:	4b30      	ldr	r3, [pc, #192]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004856:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	492d      	ldr	r1, [pc, #180]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004860:	4313      	orrs	r3, r2
 8004862:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004864:	4b2b      	ldr	r3, [pc, #172]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004868:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	4928      	ldr	r1, [pc, #160]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004872:	4313      	orrs	r3, r2
 8004874:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004876:	4b27      	ldr	r3, [pc, #156]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	4a26      	ldr	r2, [pc, #152]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 800487c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004880:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004882:	4b24      	ldr	r3, [pc, #144]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004886:	4b24      	ldr	r3, [pc, #144]	@ (8004918 <RCCEx_PLL3_Config+0x160>)
 8004888:	4013      	ands	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	69d2      	ldr	r2, [r2, #28]
 800488e:	00d2      	lsls	r2, r2, #3
 8004890:	4920      	ldr	r1, [pc, #128]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004892:	4313      	orrs	r3, r2
 8004894:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004896:	4b1f      	ldr	r3, [pc, #124]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489a:	4a1e      	ldr	r2, [pc, #120]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 800489c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80048a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ac:	4a19      	ldr	r2, [pc, #100]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048b4:	e00f      	b.n	80048d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d106      	bne.n	80048ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80048bc:	4b15      	ldr	r3, [pc, #84]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	4a14      	ldr	r2, [pc, #80]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048c8:	e005      	b.n	80048d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80048ca:	4b12      	ldr	r3, [pc, #72]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ce:	4a11      	ldr	r2, [pc, #68]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80048d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a0e      	ldr	r2, [pc, #56]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e2:	f7fc fc43 	bl	800116c <HAL_GetTick>
 80048e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048e8:	e008      	b.n	80048fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048ea:	f7fc fc3f 	bl	800116c <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e006      	b.n	800490a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048fc:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	58024400 	.word	0x58024400
 8004918:	ffff0007 	.word	0xffff0007

0800491c <memset>:
 800491c:	4402      	add	r2, r0
 800491e:	4603      	mov	r3, r0
 8004920:	4293      	cmp	r3, r2
 8004922:	d100      	bne.n	8004926 <memset+0xa>
 8004924:	4770      	bx	lr
 8004926:	f803 1b01 	strb.w	r1, [r3], #1
 800492a:	e7f9      	b.n	8004920 <memset+0x4>

0800492c <__libc_init_array>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4d0d      	ldr	r5, [pc, #52]	@ (8004964 <__libc_init_array+0x38>)
 8004930:	4c0d      	ldr	r4, [pc, #52]	@ (8004968 <__libc_init_array+0x3c>)
 8004932:	1b64      	subs	r4, r4, r5
 8004934:	10a4      	asrs	r4, r4, #2
 8004936:	2600      	movs	r6, #0
 8004938:	42a6      	cmp	r6, r4
 800493a:	d109      	bne.n	8004950 <__libc_init_array+0x24>
 800493c:	4d0b      	ldr	r5, [pc, #44]	@ (800496c <__libc_init_array+0x40>)
 800493e:	4c0c      	ldr	r4, [pc, #48]	@ (8004970 <__libc_init_array+0x44>)
 8004940:	f000 f818 	bl	8004974 <_init>
 8004944:	1b64      	subs	r4, r4, r5
 8004946:	10a4      	asrs	r4, r4, #2
 8004948:	2600      	movs	r6, #0
 800494a:	42a6      	cmp	r6, r4
 800494c:	d105      	bne.n	800495a <__libc_init_array+0x2e>
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	f855 3b04 	ldr.w	r3, [r5], #4
 8004954:	4798      	blx	r3
 8004956:	3601      	adds	r6, #1
 8004958:	e7ee      	b.n	8004938 <__libc_init_array+0xc>
 800495a:	f855 3b04 	ldr.w	r3, [r5], #4
 800495e:	4798      	blx	r3
 8004960:	3601      	adds	r6, #1
 8004962:	e7f2      	b.n	800494a <__libc_init_array+0x1e>
 8004964:	0800499c 	.word	0x0800499c
 8004968:	0800499c 	.word	0x0800499c
 800496c:	0800499c 	.word	0x0800499c
 8004970:	080049a0 	.word	0x080049a0

08004974 <_init>:
 8004974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004976:	bf00      	nop
 8004978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497a:	bc08      	pop	{r3}
 800497c:	469e      	mov	lr, r3
 800497e:	4770      	bx	lr

08004980 <_fini>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	bf00      	nop
 8004984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004986:	bc08      	pop	{r3}
 8004988:	469e      	mov	lr, r3
 800498a:	4770      	bx	lr
