/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/instructions_screen/InstructionsViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <videos/VideoDatabase.hpp>

InstructionsViewBase::InstructionsViewBase() :
    buttonCallback(this, &InstructionsViewBase::buttonCallbackHandler),
    videoEndedCallback(this, &InstructionsViewBase::videoEndedCallbackHandler),
    videoPauseButtonFadeinEndedCallback(this, &InstructionsViewBase::videoPauseButtonFadeinEndedCallbackHandler),
    videoPlayButtonFadeinEndedCallback(this, &InstructionsViewBase::videoPlayButtonFadeinEndedCallbackHandler),
    videoPlayButtonFadeoutEndedCallback(this, &InstructionsViewBase::videoPlayButtonFadeoutEndedCallbackHandler)
{
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    boxBackground.setPosition(0, 0, 480, 272);
    boxBackground.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(boxBackground);

    backgroundImage.setXY(0, 44);
    backgroundImage.setBitmap(touchgfx::Bitmap(BITMAP_VIDEO_BACKGROUND_ID));
    add(backgroundImage);

    instructionsButtonText.setXY(40, 11);
    instructionsButtonText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    instructionsButtonText.setLinespacing(0);
    instructionsButtonText.setTypedText(touchgfx::TypedText(T_INSTRUCTIONSTEXT));
    add(instructionsButtonText);

    backButton.setXY(0, 0);
    backButton.setBitmaps(touchgfx::Bitmap(BITMAP_BACK_ARROW_ID), touchgfx::Bitmap(BITMAP_BACK_ARROW_ID));
    backButton.setAction(buttonCallback);
    add(backButton);

    washerVideo.setPosition(146, 53, 302, 182);
    washerVideo.setVideoData(video_washer_bin_start, video_washer_bin_length);
    washerVideo.setRepeat(false);
    washerVideo.play();
    washerVideo.setMovieEndedAction(videoEndedCallback);
    add(washerVideo);

    videoPauseButton.setXY(146, 53);
    videoPauseButton.setBitmaps(touchgfx::Bitmap(BITMAP_VIDEO_PAUSE_BUTTON_302X182_ID), touchgfx::Bitmap(BITMAP_VIDEO_PAUSE_BUTTON_302X182_ID));
    videoPauseButton.setAlpha(0);
    videoPauseButton.setAction(buttonCallback);
    add(videoPauseButton);

    videoPlayButton.setXY(146, 53);
    videoPlayButton.setBitmaps(touchgfx::Bitmap(BITMAP_VIDEO_PLAY_BUTTON_302X182_ID), touchgfx::Bitmap(BITMAP_VIDEO_PLAY_BUTTON_302X182_ID));
    videoPlayButton.setAlpha(0);
    videoPlayButton.setVisible(false);
    videoPlayButton.setAction(buttonCallback);
    add(videoPlayButton);

    instructionsStepNr.setPosition(7, 64, 120, 26);
    instructionsStepNr.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    instructionsStepNr.setLinespacing(0);
    instructionsStepNr.setTypedText(touchgfx::TypedText(T_VIDEOSTEP1));
    add(instructionsStepNr);

    instructionsText.setPosition(7, 90, 120, 126);
    instructionsText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    instructionsText.setLinespacing(0);
    instructionsText.setTypedText(touchgfx::TypedText(T_VIDEOTEXT1));
    add(instructionsText);
}

InstructionsViewBase::~InstructionsViewBase()
{

}

void InstructionsViewBase::setupScreen()
{

}

void InstructionsViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &backButton)
    {
        //goToWasherScreen
        //When backButton clicked change screen to Washing
        //Go to Washing with no screen transition
        application().gotoWashingScreenNoTransition();
    }
    if (&src == &videoPauseButton)
    {
        //videoPause
        //When videoPauseButton clicked pause video washerVideo
        //Pause video on washerVideo
        washerVideo.pause();
        //videoPauseButtonFadein
        //When videoPauseButton clicked fade videoPauseButton
        //Fade videoPauseButton to alpha:255 with QuartOut easing in 100 ms (6 Ticks)
        videoPauseButton.clearFadeAnimationEndedAction();
        videoPauseButton.startFadeAnimation(255, 6, touchgfx::EasingEquations::quartEaseOut);
        videoPauseButton.setFadeAnimationEndedAction(videoPauseButtonFadeinEndedCallback);
        //videoPlayButtonShow
        //When videoPauseButton clicked show videoPlayButton
        //Show videoPlayButton
        videoPlayButton.setVisible(true);
        videoPlayButton.invalidate();
    }
    if (&src == &videoPlayButton)
    {
        //videoPlay
        //When videoPlayButton clicked play video washerVideo
        //Play video on washerVideo
        washerVideo.play();
        //videoPlayButtonFadein
        //When videoPlayButton clicked fade videoPlayButton
        //Fade videoPlayButton to alpha:255 with QuartOut easing in 100 ms (6 Ticks)
        videoPlayButton.clearFadeAnimationEndedAction();
        videoPlayButton.startFadeAnimation(255, 6, touchgfx::EasingEquations::quartEaseOut);
        videoPlayButton.setFadeAnimationEndedAction(videoPlayButtonFadeinEndedCallback);
    }
}

void InstructionsViewBase::videoEndedCallbackHandler(const touchgfx::VideoWidget& src)
{
    if (&src == &washerVideo)
    {
        //videoDone
        //When washerVideo video ended show videoPlayButton
        //Show videoPlayButton
        videoPlayButton.setVisible(true);
        videoPlayButton.invalidate();
    }
}

void InstructionsViewBase::videoPauseButtonFadeinEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Button>& comp)
{
    //videoPauseButtonFadeout
    //When videoPauseButtonFadein completed fade videoPauseButton
    //Fade videoPauseButton to alpha:0 with CircIn easing in 100 ms (6 Ticks)
    videoPauseButton.clearFadeAnimationEndedAction();
    videoPauseButton.startFadeAnimation(0, 6, touchgfx::EasingEquations::circEaseIn);

}

void InstructionsViewBase::videoPlayButtonFadeinEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Button>& comp)
{
    //videoPlayButtonFadeout
    //When videoPlayButtonFadein completed fade videoPlayButton
    //Fade videoPlayButton to alpha:0 with CircIn easing in 100 ms (6 Ticks)
    videoPlayButton.clearFadeAnimationEndedAction();
    videoPlayButton.startFadeAnimation(0, 6, touchgfx::EasingEquations::circEaseIn);
    videoPlayButton.setFadeAnimationEndedAction(videoPlayButtonFadeoutEndedCallback);

}

void InstructionsViewBase::videoPlayButtonFadeoutEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Button>& comp)
{
    //videoPlayBurronHide
    //When videoPlayButtonFadeout completed hide videoPlayButton
    //Hide videoPlayButton
    videoPlayButton.setVisible(false);
    videoPlayButton.invalidate();

}
