/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/homecontrolscreen_screen/HomeControlScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

HomeControlScreenViewBase::HomeControlScreenViewBase() :
    updateItemCallback(this, &HomeControlScreenViewBase::updateItemCallbackHandler),
    buttonCallback(this, &HomeControlScreenViewBase::buttonCallbackHandler),
    radioButtonSelectedCallback(this, &HomeControlScreenViewBase::radioButtonSelectedCallbackHandler),
    flexButtonCallback(this, &HomeControlScreenViewBase::flexButtonCallbackHandler)
{
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_MAIN_BG_HOME_CONTROL_ID));
    add(background);

    scrollWheelRoomSelector.setPosition(0, 60, 480, 135);
    scrollWheelRoomSelector.setHorizontal(true);
    scrollWheelRoomSelector.setCircular(true);
    scrollWheelRoomSelector.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    scrollWheelRoomSelector.setSwipeAcceleration(30);
    scrollWheelRoomSelector.setDragAcceleration(10);
    scrollWheelRoomSelector.setNumberOfItems(5);
    scrollWheelRoomSelector.setSelectedItemOffset(163);
    scrollWheelRoomSelector.setOvershootPercentage(0);
    scrollWheelRoomSelector.setSelectedItemExtraSize(0, 0);
    scrollWheelRoomSelector.setSelectedItemMargin(0, 0);
    scrollWheelRoomSelector.setDrawableSize(120, 15);
    scrollWheelRoomSelector.setDrawables(scrollWheelRoomSelectorListItems, updateItemCallback,
    
                          scrollWheelRoomSelectorSelectedListItems, updateItemCallback);
    scrollWheelRoomSelector.animateToItem(1, 0);
    add(scrollWheelRoomSelector);

    scrollWheelRoomInfo.setPosition(43, 53, 390, 146);
    scrollWheelRoomInfo.setHorizontal(true);
    scrollWheelRoomInfo.setCircular(true);
    scrollWheelRoomInfo.setEasingEquation(touchgfx::EasingEquations::cubicEaseOut);
    scrollWheelRoomInfo.setSwipeAcceleration(10);
    scrollWheelRoomInfo.setDragAcceleration(10);
    scrollWheelRoomInfo.setNumberOfItems(2);
    scrollWheelRoomInfo.setSelectedItemOffset(0);
    scrollWheelRoomInfo.setOvershootPercentage(0);
    scrollWheelRoomInfo.setDrawableSize(390, 0);
    scrollWheelRoomInfo.setDrawables(scrollWheelRoomInfoListItems, updateItemCallback);
    scrollWheelRoomInfo.animateToItem(0, 0);
    scrollWheelRoomInfo.setVisible(false);
    add(scrollWheelRoomInfo);

    containerDevicesWheel.setPosition(51, 0, 378, 272);
    containerDevicesWheel.setVisible(false);
    scrollListKitchenDevices.setPosition(1, 0, 380, 272);
    scrollListKitchenDevices.setHorizontal(false);
    scrollListKitchenDevices.setCircular(false);
    scrollListKitchenDevices.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    scrollListKitchenDevices.setSwipeAcceleration(17);
    scrollListKitchenDevices.setDragAcceleration(10);
    scrollListKitchenDevices.setNumberOfItems(4);
    scrollListKitchenDevices.setPadding(63, 0);
    scrollListKitchenDevices.setSnapping(false);
    scrollListKitchenDevices.setOvershootPercentage(0);
    scrollListKitchenDevices.setDrawableSize(124, 0);
    scrollListKitchenDevices.setDrawables(scrollListKitchenDevicesListItems, updateItemCallback);
    containerDevicesWheel.add(scrollListKitchenDevices);

    scrollListBathroomDevices.setPosition(429, 0, 380, 272);
    scrollListBathroomDevices.setHorizontal(false);
    scrollListBathroomDevices.setCircular(false);
    scrollListBathroomDevices.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    scrollListBathroomDevices.setSwipeAcceleration(17);
    scrollListBathroomDevices.setDragAcceleration(10);
    scrollListBathroomDevices.setNumberOfItems(3);
    scrollListBathroomDevices.setPadding(63, 0);
    scrollListBathroomDevices.setSnapping(false);
    scrollListBathroomDevices.setOvershootPercentage(0);
    scrollListBathroomDevices.setDrawableSize(124, 0);
    scrollListBathroomDevices.setDrawables(scrollListBathroomDevicesListItems, updateItemCallback);
    containerDevicesWheel.add(scrollListBathroomDevices);

    add(containerDevicesWheel);

    switchRoomLeft.setIconBitmaps(Bitmap(BITMAP_ARROW_LEFT_ID), Bitmap(BITMAP_ARROW_LEFT_PRESSED_ID));
    switchRoomLeft.setIconXY(15, 56);
    switchRoomLeft.setVisible(false);
    switchRoomLeft.setAction(flexButtonCallback);
    switchRoomLeft.setPosition(0, 81, 52, 133);
    add(switchRoomLeft);

    switchRoomRight.setIconBitmaps(Bitmap(BITMAP_ARROW_RIGHT_ID), Bitmap(BITMAP_ARROW_RIGHT_PRESSED_ID));
    switchRoomRight.setIconXY(15, 56);
    switchRoomRight.setVisible(false);
    switchRoomRight.setAction(flexButtonCallback);
    switchRoomRight.setPosition(430, 81, 52, 133);
    add(switchRoomRight);

    radioButtonGroup.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
    
    radioButtonTemperature.setXY(0, 193);
    radioButtonTemperature.setBitmaps(touchgfx::Bitmap(BITMAP_TEMPERATURE_NORMAL_ID), touchgfx::Bitmap(BITMAP_TEMPERATURE_NORMAL_ID), touchgfx::Bitmap(BITMAP_TEMPERATURE_SELECTED_ID), touchgfx::Bitmap(BITMAP_TEMPERATURE_SELECTED_ID));
    radioButtonTemperature.setSelected(true);
    radioButtonTemperature.setDeselectionEnabled(false);
    radioButtonTemperature.setAlpha(0);
    radioButtonGroup.add(radioButtonTemperature);
    add(radioButtonTemperature);

    radioButtonDevices.setXY(120, 193);
    radioButtonDevices.setBitmaps(touchgfx::Bitmap(BITMAP_DEVICES_NORMAL_ID), touchgfx::Bitmap(BITMAP_DEVICES_NORMAL_ID), touchgfx::Bitmap(BITMAP_DEVICES_SELECTED_ID), touchgfx::Bitmap(BITMAP_DEVICES_SELECTED_ID));
    radioButtonDevices.setSelected(false);
    radioButtonDevices.setDeselectionEnabled(false);
    radioButtonDevices.setAlpha(0);
    radioButtonGroup.add(radioButtonDevices);
    add(radioButtonDevices);

    buttonPersonalize.setXY(360, 193);
    buttonPersonalize.setBitmaps(touchgfx::Bitmap(BITMAP_PESONALIZE_ID), touchgfx::Bitmap(BITMAP_PESONALIZE_ID));
    buttonPersonalize.setAlpha(0);
    buttonPersonalize.setAction(buttonCallback);
    add(buttonPersonalize);

    buttonMusicRecipes.setXY(240, 193);
    buttonMusicRecipes.setBitmaps(touchgfx::Bitmap(BITMAP_MUSIC_ID), touchgfx::Bitmap(BITMAP_MUSIC_ID));
    buttonMusicRecipes.setAlpha(0);
    buttonMusicRecipes.setAction(buttonCallback);
    add(buttonMusicRecipes);

    imageTopGradient.setXY(0, 0);
    imageTopGradient.setBitmap(touchgfx::Bitmap(BITMAP_TOP_GRADIENT_OVERLAY_ID));
    imageTopGradient.setVisible(false);
    add(imageTopGradient);

    buttonPreviousRoom.setXY(0, 0);
    buttonPreviousRoom.setBitmaps(touchgfx::Bitmap(BITMAP_GO_BACK_BUTTON_BATH_ID), touchgfx::Bitmap(BITMAP_GO_BACK_BUTTON_BATH_ID));
    buttonPreviousRoom.setAlpha(0);
    buttonPreviousRoom.setAction(buttonCallback);
    add(buttonPreviousRoom);

    buttonBack.setXY(0, 0);
    buttonBack.setBitmaps(touchgfx::Bitmap(BITMAP_GO_BACK_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_GO_BACK_BUTTON_PRESSED_ID));
    buttonBack.setAlpha(0);
    buttonBack.setVisible(false);
    buttonBack.setAction(buttonCallback);
    add(buttonBack);

    textAreaHomeUIHeadline.setPosition(79, 15, 323, 30);
    textAreaHomeUIHeadline.setColor(touchgfx::Color::getColorFromRGB(30, 125, 200));
    textAreaHomeUIHeadline.setLinespacing(0);
    textAreaHomeUIHeadline.setTypedText(touchgfx::TypedText(T_HOMEUIHEADLINEROOMTEMPERATURES));
    textAreaHomeUIHeadline.setAlpha(0);
    add(textAreaHomeUIHeadline);

    textAreaDate.setPosition(392, 11, 75, 14);
    textAreaDate.setColor(touchgfx::Color::getColorFromRGB(58, 80, 110));
    textAreaDate.setLinespacing(0);
    textAreaDate.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DFI7));
    textAreaDate.setAlpha(0);
    add(textAreaDate);

    textAreaTime.setPosition(392, 25, 75, 14);
    textAreaTime.setColor(touchgfx::Color::getColorFromRGB(58, 80, 110));
    textAreaTime.setLinespacing(0);
    textAreaTime.setTypedText(touchgfx::TypedText(T___SINGLEUSE_D4P1));
    textAreaTime.setAlpha(0);
    add(textAreaTime);

    glowTemp.setXY(20, 187);
    glowTemp.setBitmap(touchgfx::Bitmap(BITMAP_SELECT_GLOW_ID));
    glowTemp.setAlpha(0);
    add(glowTemp);

    glowDevices.setXY(140, 187);
    glowDevices.setBitmap(touchgfx::Bitmap(BITMAP_SELECT_GLOW_ID));
    glowDevices.setAlpha(0);
    add(glowDevices);

    glowRecipe.setXY(260, 187);
    glowRecipe.setBitmap(touchgfx::Bitmap(BITMAP_SELECT_GLOW_ID));
    glowRecipe.setAlpha(0);
    add(glowRecipe);

    homeUISplashContainer.setXY(0, 0);
    add(homeUISplashContainer);
}

HomeControlScreenViewBase::~HomeControlScreenViewBase()
{

}

void HomeControlScreenViewBase::setupScreen()
{
    scrollWheelRoomSelector.initialize();
    for (int i = 0; i < scrollWheelRoomSelectorListItems.getNumberOfDrawables(); i++)
    {
        scrollWheelRoomSelectorListItems[i].initialize();
    }
    for (int i = 0; i < scrollWheelRoomSelectorSelectedListItems.getNumberOfDrawables(); i++)
    {
        scrollWheelRoomSelectorSelectedListItems[i].initialize();
    }
    scrollWheelRoomInfo.initialize();
    for (int i = 0; i < scrollWheelRoomInfoListItems.getNumberOfDrawables(); i++)
    {
        scrollWheelRoomInfoListItems[i].initialize();
    }
    scrollListKitchenDevices.initialize();
    for (int i = 0; i < scrollListKitchenDevicesListItems.getNumberOfDrawables(); i++)
    {
        scrollListKitchenDevicesListItems[i].initialize();
    }
    scrollListBathroomDevices.initialize();
    for (int i = 0; i < scrollListBathroomDevicesListItems.getNumberOfDrawables(); i++)
    {
        scrollListBathroomDevicesListItems[i].initialize();
    }
    homeUISplashContainer.initialize();
}

void HomeControlScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonPreviousRoom)
    {
        //GoToPrevRoom
        //When buttonPreviousRoom clicked call virtual function
        //Call goToPrevRoom
        goToPrevRoom();
    }
    if (&src == &buttonBack)
    {
        //InteractionBackButtonPressed
        //When buttonBack clicked call virtual function
        //Call backButtonPressed
        backButtonPressed();
    }
    if (&src == &buttonMusicRecipes)
    {
        //MusicRecipesPressed
        //When buttonMusicRecipes clicked call virtual function
        //Call buttonMuiscRecipesPressed
        buttonMuiscRecipesPressed();
    }
    if (&src == &buttonPersonalize)
    {
        //buttonPersonalizePressed
        //When buttonPersonalize clicked call virtual function
        //Call buttonPersPressed
        buttonPersPressed();
    }
}

void HomeControlScreenViewBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &radioButtonDevices)
    {
        //InteractionRadioDevicesSelected
        //When radioButtonDevices selected call virtual function
        //Call radioDevicesSelected
        radioDevicesSelected();
    }
    if (&src == &radioButtonTemperature)
    {
        //InteractionRadioTemperatureSelected
        //When radioButtonTemperature selected call virtual function
        //Call radioTemperatureSelected
        radioTemperatureSelected();
    }
}

void HomeControlScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &switchRoomLeft)
    {
        //InteractionRoomInfoLeftClicked
        //When switchRoomLeft clicked call virtual function
        //Call roomInfoLeftClicked
        roomInfoLeftClicked();
    }
    if (&src == &switchRoomRight)
    {
        //InteractionRoomInfoRightClicked
        //When switchRoomRight clicked call virtual function
        //Call roomInfoRightClicked
        roomInfoRightClicked();
    }
}

void HomeControlScreenViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &scrollWheelRoomSelectorListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        HomeUIWheelElement* cc = (HomeUIWheelElement*)d;
        scrollWheelRoomSelectorUpdateItem(*cc, itemIndex);
    }
    if (items == &scrollWheelRoomSelectorSelectedListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        HomeUIWheelElement* cc = (HomeUIWheelElement*)d;
        scrollWheelRoomSelectorUpdateCenterItem(*cc, itemIndex);
    }

    if (items == &scrollWheelRoomInfoListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        RoomInfoWheelElements* cc = (RoomInfoWheelElements*)d;
        scrollWheelRoomInfoUpdateItem(*cc, itemIndex);
    }

    if (items == &scrollListKitchenDevicesListItems)
    {
        scrollListKitchenDevicesUpdateItem(scrollListKitchenDevicesListItems[containerIndex], itemIndex);
    }

    if (items == &scrollListBathroomDevicesListItems)
    {
        scrollListBathroomDevicesUpdateItem(scrollListBathroomDevicesListItems[containerIndex], itemIndex);
    }
}
